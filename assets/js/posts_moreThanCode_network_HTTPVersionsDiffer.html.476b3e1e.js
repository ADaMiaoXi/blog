"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[9744],{66262:(i,t)=>{t.A=(i,t)=>{const e=i.__vccOpts||i;for(const[i,p]of t)e[i]=p;return e}},65288:(i,t,e)=>{e.r(t),e.d(t,{comp:()=>d,data:()=>T});var p=e(20641);const a=e.p+"assets/img/image-20240229144200042.2237ffaf.png",s=e.p+"assets/img/image-20240229145151247.b05290bf.png",l=e.p+"assets/img/image-20240229145430943.c898e135.png",n=e.p+"assets/img/image-20240229163726888.032e05f3.png",o=e.p+"assets/img/image-20240229195942375.65cee991.png",r=e.p+"assets/img/image-20240229200202347.82e9929d.png",h=e.p+"assets/img/image-20240229200316573.77260b35.png",c=e.p+"assets/img/image-20240229200714151.ac7b159d.png",g={},d=(0,e(66262).A)(g,[["render",function(i,t){return(0,p.uX)(),(0,p.CE)("div",null,t[0]||(t[0]=[(0,p.Fv)('<h3 id="_23-1-http1-0" tabindex="-1"><a class="header-anchor" href="#_23-1-http1-0"><span>23.1 HTTP1.0</span></a></h3><h4 id="_23-1-1-无法复用连接" tabindex="-1"><a class="header-anchor" href="#_23-1-1-无法复用连接"><span>23.1.1 无法复用连接</span></a></h4><p>HTTP1.0 为每个请求单独新开一个 TCP 连接</p><img src="'+a+'" alt="image-20240229144200042" style="zoom:80%;"><p>由于每个请求都是独立的连接，因此会带来下面的问题：</p><ol><li><p>连接的建立和销毁都会占用服务的资源，造成内存资源的浪费</p></li><li><p>连接的建立好销毁都会消耗时间，造成响应时间的浪费</p></li><li><p>无法充分利用带宽，造成带宽资源的浪费</p><blockquote><p>TCP 协议的特点是<strong>慢启动</strong>（拥塞控制），即一开始传输的数据量少，一段时间之后达到的数据的峰值。而上面的做法，会导致大量的请求在 TCP 达到传输峰值前就被销毁了</p></blockquote></li></ol><h2 id="_23-1-1-队头阻塞" tabindex="-1"><a class="header-anchor" href="#_23-1-1-队头阻塞"><span>23.1.1 队头阻塞</span></a></h2><img src="'+s+'" alt="image-20240229145151247" style="zoom:67%;"><p>请求一个接着一个发出去，后面的请求得等前面的请求响应后才会发出去。</p><h3 id="_23-2-http1-1" tabindex="-1"><a class="header-anchor" href="#_23-2-http1-1"><span>23.2 HTTP1.1</span></a></h3><h4 id="_23-2-1-长连接" tabindex="-1"><a class="header-anchor" href="#_23-2-1-长连接"><span>23.2.1 长连接</span></a></h4><p>为了解决 HTTP1.0 的问题，<strong>HTTP1.1默认开启长连接</strong>，即让同一个 TCP 连接服务于多个请求 - 响应。</p><img src="'+l+'" alt="image-20240229145430943" style="zoom:80%;"><p>在这种情况下，多次请求响应可以共享一个TCP连接，这不仅减少了TCP的握手和回收时间，同时可以充分利用 TCP <strong>慢启动</strong>的特点，有效的利用带宽。</p><blockquote><p>实际上，在 HTTP1.0 后期，虽然没有官方标准，但开发者们慢慢形成了一个共识：</p><p><strong>只要请求头中包含 Connection: keep-alive，就表示客户端希望开启长连接，希望服务器响应后不要关闭 TCP 连接。如果服务器认可这一行为，即可保持 TCP 连接。</strong></p></blockquote><p>当需要的时候，任何乙方可以关闭 TCP 连接</p><blockquote><p>拓展知识</p><p>连接关闭的情况主要有三种：</p><ol><li>客户端在某一次请求中设置了 <code>Connection:close</code>，服务器收到此请求后，响应结束立即关闭 TCP</li><li>在没有请求时，客户端会不断对服务器进行心跳检测（一般间隔1秒）。一旦心跳检测停止，服务器立即关闭 TCP</li><li>当客户端长时间没有新的请求到达服务器，服务器会主动关闭 TCP。运维人员可以设置该时间。</li></ol></blockquote><p>由于一个 TCP 连接可以承载多次请求响应，并在一段时间内不会断开，因此这种连接称之为长连接。</p><h4 id="_23-1-2-管道化和队头阻塞" tabindex="-1"><a class="header-anchor" href="#_23-1-2-管道化和队头阻塞"><span>23.1.2 管道化和队头阻塞</span></a></h4><p>HTTP1.1 允许在响应到达之前发送下一个请求，这样可以大幅缩减带宽限制时间。</p><p><strong>但这样做会存在队头阻塞问题</strong></p><img src="'+n+'" alt="image-20240229163726888" style="zoom:80%;"><p>由于多个请求使用的是一个 TCP 连接，<strong>服务器必须按照请求到达的顺序进行响应</strong></p><p>于是，导致了一些后发出的请求，无法在处理完成后响应，产生了等待的时间，而这段时间的带宽可能是空闲的，这就造成了带宽的浪费。</p><p>队头阻塞虽然<strong>发生在服务器</strong>，但是这个问题的根源是客户端无法知晓服务器的响应是针对哪个请求的。</p><p>正是由于存在队头阻塞，我们常常使用下面的手段进行优化：</p><ul><li><p>通过减少文件数量，从而减少队头阻塞的几率</p></li><li><p>通过开辟多个 TCP 连接，实现真正的、有缺陷的并行传输</p><blockquote><p>浏览器会根据情况，为打开的页面自动开启 TCP 连接，对于同一个域名的连接最多6个。</p><p>如果要突破这个限制，就需要把资源放到不同的域中。</p></blockquote><p><strong>然而，管道化并非一个成功的模型，它带来的队头阻塞造成非常多的问题，所以现代浏览器默认是关闭这个模式的。</strong></p></li></ul><h3 id="_23-3-http-2-0" tabindex="-1"><a class="header-anchor" href="#_23-3-http-2-0"><span>23.3 HTTP 2.0</span></a></h3><img src="'+o+'" alt="image-20240229195942375" style="zoom:80%;"><h4 id="_23-3-1-二进制分帧" tabindex="-1"><a class="header-anchor" href="#_23-3-1-二进制分帧"><span>23.3.1 二进制分帧</span></a></h4><p>HTTP2.0可以允许以更小的单元传输数据，每个传输单元称之为<strong>帧</strong>，而每一个请求或响应的完整数据称之为<strong>流</strong>，每个流有自己的编号，每个帧会记录所属的流。</p><p>比如，服务器连续接到了客户端的两个请求，一个 请求 JS、一个请求 CSS，两个文件如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>左中形成的帧可能如下</p><figure><img src="'+r+'" alt="image-20240229200202347" tabindex="0" loading="lazy"><figcaption>image-20240229200202347</figcaption></figure><p>可以看出，每个帧都带了一个头部，记录了流的ID，这样做就能够准确的知道每一帧数据是属于哪个流的。</p><figure><img src="'+h+'" alt="image-20240229200316573" tabindex="0" loading="lazy"><figcaption>image-20240229200316573</figcaption></figure><p>这样就真正的解决了共享 TCP 链接时的对头阻塞问题，实现了真正的<strong>多路复用</strong>。</p><p>不仅如此，由于传输时是以帧为单元传输的，无论是响应头还是请求，都可以实现并发处理，即不同的传输可以交替进行。</p><p>由于进行了分帧，还可以设置<strong>传输优先级</strong>。</p><h4 id="_23-3-2-头部压缩" tabindex="-1"><a class="header-anchor" href="#_23-3-2-头部压缩"><span>23.3.2 头部压缩</span></a></h4><p>HTTP2.0 之前，所有的消息头都是以字符串的形式完整传输的。</p><p>可实际上，大部分头部信息都有很多的重复</p><p>为了解决这一问题，HTTP2.0 使用头部压缩来减少消息头的体积</p><figure><img src="'+c+'" alt="image-20240229200714151" tabindex="0" loading="lazy"><figcaption>image-20240229200714151</figcaption></figure><p>对于两张表都没有的头部，则使用 Huffman 编码压缩后进行传输，同时添加都动态头中。</p><h4 id="_23-3-3-服务器推流" tabindex="-1"><a class="header-anchor" href="#_23-3-3-服务器推流"><span>23.3.3 服务器推流</span></a></h4><p>HTTP2.0 允许在客户端没有主动请求的情况下，服务器预先把资源推送给客户端。</p><p>当客户端后续需要请求该资源时，则自动从之前推送的资源中查找。</p><h3 id="_23-4-问答" tabindex="-1"><a class="header-anchor" href="#_23-4-问答"><span>23.4 问答</span></a></h3><ol><li><p>介绍下 <code>http1.0</code>、<code>http1.1</code>、<code>http2.0</code> 协议的区别？</p><blockquote><p>参考答案：</p><p>首先说 http1.0</p><p>它的特点是每次请求和响应完毕后都会销毁TCP连接，同时规定前一个响应完成后才<br> 能发送下一个请求。这样做有两个问题:</p><ol><li>无法复用连接<br> 每次请求都要创建新的TCP 连接，完成三次握手和四次挥手，网络利用率低。</li><li>队头阻塞<br> 如果前一个请求被某种原因阻塞了，会导致后续请求无法发送。</li></ol><p>然后是 http1 .1<br> http1.1是http1.0 的改进版，它做出了以下改进:</p><ol><li><p>长连接<br> http1.1允许在请求时增加请求头connection:keep-alive ，这样便允许后续的客户端请求在一段时间内复用之前的 TCP 连接。</p></li><li><p>管道化<br> 基于长连接的基础，管道化可以不等第一个请求响应继续发送后面的请求，但响应的顺序还是按照请求的顺序返回。</p></li><li><p>缓存处理</p><p>新增响应头 <code>cache-control</code>， 用于实现客户端缓存。</p></li><li><p>断点传输<br> 在上传/下载资源时，如果资源过大，将其分割为多个部分，分别上传/下载，如果遇到网络故障，可以从已经上传/下载好的地方继续请求，不用从头开始，提高效率。</p></li></ol><p>最后是 http2.0</p><p>http2.0 进一步优化了传输效率，它主要有以下改进:</p><ol><li>二进制分帧<br> 将传输的消息分为更小的二进制帧，每帧有自己的标识序号，即便被随意打乱也能在另一端正确组装</li><li>多路复用<br> 基于二进制分帧，在同一域名下所有访问都是从同一个 tcp 连接中走，并且不再有队头阻塞问题，也无须遵守响应顺序</li><li>头部压缩<br> http2.0 通过字典的形式，将头部中的常见信息替换为更少的字符，极大的减少了头部的数据量，从而实现更小的传输量</li><li>服务器推<br> http2.0 允许服务器直接推送消息给客户端，无须客户端明确的请求</li></ol></blockquote></li><li><p>为什么HTTP1.1 不能实现多路复用（腾讯）</p></li></ol><blockquote><p>参考答案:<br> HTTP/1.1的传输单元是整个响应文本,I因此接收方必须按序接收完所有的内容后才能 接收下一一个传输单元，否则就会造成混乱。而 HTTP2 . 0 的传输单元更小，是一个二进制帧，而且每个帧有针对所属流的编号，这样即便是不同的流交替传输，也可以很容易区分出每个帧是属于哪个流的。</p></blockquote><ol start="3"><li>简单讲解一下http2 的多路复用（网易）</li></ol><blockquote><p>在HTTP/2中， 有两个非常重要的概念，分别是帧（frame） 和流（stream） 。帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。多路复用， 就是在一个TCP 连接中可以存在多条流。换句话说，也就是可以发送<br> 多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p></blockquote><ol start="4"><li>http1.1 是如何复用 tcp 连接的? （网易）</li></ol><blockquote><p>客户端请求服务器时，通过请求行告诉服务器使用的协议是 http1 .1，同时在请求头中附带 <code>connection: keep-alive</code> (为保持兼容) ，告诉服务器这是一个长连接，后续请求可以重复使用这一次的TCP连接。<br> 这样做的好处是减少了三次握手和四次挥手的次数，一定程度上提升了网络利用率。但由于 http1.1 不支持多路复用，响应顺序必须按照请求顺序抵达客户端，不能真正实现并行传输，因此在 http2.0 出现之前，实际项目中往往把静态资源，比如图片，分发到不同域名下的资源服务器，以便实现真正的并行传输。</p></blockquote><ol start="5"><li>http1.0、http2.0、http3.0之间的区别</li></ol><blockquote><p>参考答案:<br> http1.0<br> 每次请求和响应完毕后都会销毁TCP 连接，同时规定前一个响应完成后才能发送下一个请求。这样做有两个问题：</p><ol><li><p>无法复用连接</p><p>每次请求都要创建新的TCP 连接，完成三次握手和四次挥手，网络利用率低</p></li><li><p>队头阻塞<br> 如果前一个请求被某种原因阻塞了，会导致后续请求无法发送。</p></li></ol><p>http2.0<br> http2.0 优化了传输效率，它主要有以下改进：</p><ol><li><p>二进制分帧<br> 将传输的消息分为更小的二进制帧，每帧有自己的标识序号，即便被随意打乱也能在另一端正确组装</p></li><li><p>多路复用<br> 基于二进制分帧，在同一域名下所有访问都是从同一个 tcp 连接中走，并且不再有队头阻塞问题，也无须遵守响应顺序</p></li><li><p>头部压缩<br> http2.0 通过字典的形式，将头部中的常见信息替换为更少的字符，极大的减少了头部的数据量，从而实现更小的传输量</p></li><li><p>服务器推<br> http2.0允许服务器直接推送消息给客户端，无须客户端明确的请求</p></li></ol><p>http3.0</p><p>http3.0 目前还在草案阶段，它完全抛弃了 TCP 协议，转而使用 UDP 协议，是为了进一步提升性能。</p><p>虽然 http2.0 进行了大量的优化，但它无法摆脱 TCP 协议本身的问题，比如建立连接时间长、对头阻塞问题等等。</p><p>为了保证传输的可靠性，http3.0 使用了 QUIC 协议。</p></blockquote>',59)]))}]]),T=JSON.parse('{"path":"/posts/moreThanCode/network/HTTPVersionsDiffer.html","title":"HTTP各版本差异","lang":"zh-CN","frontmatter":{"title":"HTTP各版本差异","icon":"carbon:http","order":23,"category":["网络"],"description":"23.1 HTTP1.0 23.1.1 无法复用连接 HTTP1.0 为每个请求单独新开一个 TCP 连接 image-20240229144200042 由于每个请求都是独立的连接，因此会带来下面的问题： 连接的建立和销毁都会占用服务的资源，造成内存资源的浪费 连接的建立好销毁都会消耗时间，造成响应时间的浪费 无法充分利用带宽，造成带宽资源的浪费 T...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/moreThanCode/network/HTTPVersionsDiffer.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"HTTP各版本差异"}],["meta",{"property":"og:description","content":"23.1 HTTP1.0 23.1.1 无法复用连接 HTTP1.0 为每个请求单独新开一个 TCP 连接 image-20240229144200042 由于每个请求都是独立的连接，因此会带来下面的问题： 连接的建立和销毁都会占用服务的资源，造成内存资源的浪费 连接的建立好销毁都会消耗时间，造成响应时间的浪费 无法充分利用带宽，造成带宽资源的浪费 T..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T15:00:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T15:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP各版本差异\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-01T15:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"23.1 HTTP1.0","slug":"_23-1-http1-0","link":"#_23-1-http1-0","children":[]},{"level":2,"title":"23.1.1 队头阻塞","slug":"_23-1-1-队头阻塞","link":"#_23-1-1-队头阻塞","children":[{"level":3,"title":"23.2 HTTP1.1","slug":"_23-2-http1-1","link":"#_23-2-http1-1","children":[]},{"level":3,"title":"23.3 HTTP 2.0","slug":"_23-3-http-2-0","link":"#_23-3-http-2-0","children":[]},{"level":3,"title":"23.4 问答","slug":"_23-4-问答","link":"#_23-4-问答","children":[]}]}],"git":{"createdTime":1739717238000,"updatedTime":1740841217000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":3,"url":"https://github.com/damiaoxi"}]},"readingTime":{"minutes":9.82,"words":2947},"localizedDate":"2025年2月16日","excerpt":"<h3>23.1 HTTP1.0</h3>\\n<h4>23.1.1 无法复用连接</h4>\\n<p>HTTP1.0 为每个请求单独新开一个 TCP 连接</p>\\n\\n<p>由于每个请求都是独立的连接，因此会带来下面的问题：</p>\\n<ol>\\n<li>\\n<p>连接的建立和销毁都会占用服务的资源，造成内存资源的浪费</p>\\n</li>\\n<li>\\n<p>连接的建立好销毁都会消耗时间，造成响应时间的浪费</p>\\n</li>\\n<li>\\n<p>无法充分利用带宽，造成带宽资源的浪费</p>\\n<blockquote>\\n<p>TCP 协议的特点是<strong>慢启动</strong>（拥塞控制），即一开始传输的数据量少，一段时间之后达到的数据的峰值。而上面的做法，会导致大量的请求在 TCP 达到传输峰值前就被销毁了</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}')}}]);