"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[3567],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},2058:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>k});var n=a(641);const l=a.p+"assets/img/image-20240226132622272.9da2025b.png",e=a.p+"assets/img/image-20240226203920802.5cfbd2f7.png",t=a.p+"assets/img/image-20240226205719745.395dca51.png",h={},p=(0,a(6262).A)(h,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>CORS 是基于 http1.1 的一种跨域解决方案，它的全称是 Cross-0rigin Resource Sharing，跨域资源共享。</p><p>它的总体思路是:如果浏览器要跨域访问服务器的资源，需要获得服务器的允许</p><figure><img src="'+l+'" alt="image-20240226132622272" tabindex="0" loading="lazy"><figcaption>image-20240226132622272</figcaption></figure><p>而要知道，一个请求可以附带很多信息，从而会对服务器造成不同程度的影响比如有的请求只是获取一些新闻，有的请求会改动服务器的数据。</p><p>针对不同的请求，CORS 规定了三种不同的交互模式，分别是:</p><ul><li><p>简单请求</p></li><li><p>需要预检的请求</p></li><li><p>附带身份凭证的请求</p></li></ul><p>这三种模式从上到下层层递进，请求可以做的事越来越多，要求也越来越严格。</p><p>下面分别说明三种请求模式的具体规范。</p><h2 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h2><p>当浏览器端运行了一段 ajax 代码（无论是使用XMLHttpRequest 还是fetch api），浏览器会首先判断它属于哪一种请求模式。</p><h3 id="简单请求的判定" tabindex="-1"><a class="header-anchor" href="#简单请求的判定"><span>简单请求的判定</span></a></h3><p>当请求同时满足以下条件时，浏览器会认为它是一个简单请求:</p><ol><li><strong>请求方法属于下面的一种:</strong><ul><li>get</li><li>post</li><li>head</li></ul></li><li>**请求头仅包含安全的字段，常见的安全字段如下: ** <ul><li>Accept</li><li>Accept-L anguage</li><li>Content-Language</li><li>Content- Type</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li><strong>请求头如果包含Content-Type，仅限下面的值之一</strong><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ol><p>如果以上三个条件同时满足，浏览器判定为简单请求。</p><p>下面是一些例子:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 请求方法不满足要求，不是简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmethod</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;PUT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 加入了额外的请求头，不是简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">headers</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\ta</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmethod</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;post&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// content-type不满足要求，不是简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain. com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmethod</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;post&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\theaders</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\t\t&#39;content-type&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;application/json &#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t},</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单请求的交互规范" tabindex="-1"><a class="header-anchor" href="#简单请求的交互规范"><span>简单请求的交互规范</span></a></h3><p>当浏览器判定某个ajax 跨域请求是简单请求时，会发生以下的事情</p><ol><li><p>请求头中会自动添加 <code>Origin</code> 字段</p><p>比如，在页面 <a href="http://my.com/index.html" target="_blank" rel="noopener noreferrer">http://my.com/index.html</a> 中有以下代码造成了跨域</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//简单请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/news&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>请求发出后，请求头会是下面的格式：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">GET /api/news/HTTP/1.1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">crossdomain.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">keep-alive</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Referer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com/index.html</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到最后一行没, <code>Origin</code> 字段会告诉服务器，是哪个源地址在跨域请求</p></li><li><p>服务器响应头中应包含 <code>Access-Control-Allow-Origin</code></p><p>当服务器收到请求后，如果允许该请求跨域访问，需要在响应头中添加 <code>Access-Control-Allow-Origin</code> 字段</p></li></ol><p>该字段的值可以是:</p><ul><li>*：表示我很开放，什么人我都允许访问</li><li>具体的源：比如 <a href="http://my.com" target="_blank" rel="noopener noreferrer">http://my.com</a>，表示我就允许你访问</li></ul><blockquote><p>实际上，这两个值对于客户端<a href="http://my.com" target="_blank" rel="noopener noreferrer">http://my.com</a> 而言，都一样，因为客户端才不会管其他源服务器允不允许，就关心自己是否被允许</p><p>当然，服务器也可以维护一个可被允许的源列表，如果请求的 Origin 命中该列表，才响应 <code>*</code> 或具体的源</p><p><strong>为了避免后续的麻烦，强烈推荐响应具体的源</strong></p></blockquote><p>假设服务器做出了以下的响应：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HTTP/1.1 200 OK</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Tue, 21 Apr 2020 08:03:35 GMT</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-0rigin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">消息体中的数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当浏览器看到服务器允许自己访问后，高兴的像一个两百斤的孩子，于是，它就把响应顺利的交给 js，以完成后续的操作</p><p>下图简述了整个交互过程</p><figure><img src="'+e+'" alt="image-20240226203920802" tabindex="0" loading="lazy"><figcaption>image-20240226203920802</figcaption></figure><h2 id="需要预检的请求" tabindex="-1"><a class="header-anchor" href="#需要预检的请求"><span>需要预检的请求</span></a></h2><p>简单的请求对服务器的威胁不大，所以允许使用上述的简单交互即可完成。但是，如果浏览器不认为这是一种简单请求，就会按照下面的流程进行:</p><ol><li><strong>浏览器发送预检请求，询问服务器是否允许</strong></li><li><strong>服务器允许</strong></li><li><strong>浏览器发送真实请求</strong></li><li><strong>服务器完成真实的响应</strong></li></ol><p>比如，在页面 <code>http://my.com/index.html</code> 中有以下代码造成了跨域</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//需要预检的请求</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://crossdomain.com/api/user&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tmethod</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;POST&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, /post </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">请求</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\theaders</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t\t//设置请求头</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\ta</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tb</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\t\t&#39;content-type&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;application/json&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t},</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tbody</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;袁小进&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">， </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> })， </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//设置请求体</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器发现它不是一个简单请求，则会按照下面的流程与服务器交互：</p><ol><li><p><strong>浏览器发送预检请求，询问服务器是否允许</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">OPTIONS /api/user HTTP/1.1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">crossdomain.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Request-Method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">POST</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Request-Headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a, b, content-type</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，这并非我们想要发出的真实请求，请求中不包含我们的响应头，也没有消息体</p><p>这是一个预检请求，它的目的是询问服务器，是否允许后续的真实请求。</p><p>预检请求没有请求体，它包含了后续真实请求要做的事情</p><p>预检请求有以下特征:</p><ul><li><p>请求方法为 <code>OPTIONS</code></p></li><li><p>没有请求体</p></li><li><p>请求头中包含</p><ul><li><code>Origin</code>：请求的源，和简单请求的含义一致</li><li><code>Access-Control-Request-Method</code>：后续的真实请求将使用的请求方法</li><li><code>Access-Control-Request-Headers</code>：后续的真实请求会改动的请求头</li></ul></li></ul></li><li><p><strong>服务器允许</strong></p><p>服务器收到预检请求后，可以检查预检请求中包含的信息，如果允许这样的请求，需要响应下面的消息格式</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HTTP/1.1 200 OK</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Tue, 21 Apr 2020 08:03:35 GMT</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Methods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">POST</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-Headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">a, b, content-type</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Max-Age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">86400</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于预检请求，不需要响应任何的消息体，只需要在响应头中添加：</p><ul><li><code>Access-Control-Allow-Origin</code> :和简单请求一样，表示允许的源</li><li><code>Access-Control-Allow-Methods</code> :表示允许的后续真实的请求方法</li><li><code>Access-Control-Allow-Headers</code> :表示允许改动的请求头</li><li><code>Access-Control-Max-Age</code> :告诉浏览器多少秒内，对于同样的请求源、方法、头，都不<br> 需要再发送预检请求了</li></ul></li><li><p><strong>浏览器发送真实请求</strong></p></li></ol><p>预检被服务器允许后，浏览器就会发送真实请求了，上面的代码会发生下面的请求数据</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">POST /api/user HTTP/1.1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">crossdomain.com</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">keep-alive</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Referer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com/index.html</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;袁小进&quot;， &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p><strong>服务器响应真实请求</strong></p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HTTP/1.1 200 OK</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Tue, 21 Apr 2020 08:03:35 GMT</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Allow-0rigin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://my.com</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">添加用户成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，当完成预检之后，后续的处理与简单请求相同</p><p>下图简述了整个交互过程</p><figure><img src="'+t+'" alt="image-20240226205719745" tabindex="0" loading="lazy"><figcaption>image-20240226205719745</figcaption></figure></li></ol><h2 id="附带身份凭证的请求" tabindex="-1"><a class="header-anchor" href="#附带身份凭证的请求"><span>附带身份凭证的请求</span></a></h2><p>默认情况下，ajax 的跨域请求并不会附带 cookie, 这样一来，某些需要权限的操作就无法进行</p><p>不过可以通过简单的配置就可以实现附带 cookie</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// xhr</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">withCredentials</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// fetch api</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tcredentials</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;include&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，该跨域的 ajax 请求就是一个附带身份凭证的请求</p><p>当一个请求需要附带 cookie 时，无论它是简单请求，还是预检请求，都会在请求头中添加 cookie 字段</p><p>而服务器响应时，需要明确告知客户端:服务器允许这样的凭据</p><p>告知的方式也非常的简单只需要在响应头中添加：<code>Access-Control-Allow-Credentials:true</code>即可</p><p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p><p>另外要特别注意的是：*<em>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code> 的值为 <code>*</code> 这就是为什么不推荐使用 <em>的原因</em></em></p><h2 id="一个额外的补充" tabindex="-1"><a class="header-anchor" href="#一个额外的补充"><span>一个额外的补充</span></a></h2><p>在跨域访问时，JS 只能拿到一些最基本的响应头，如: <code>Cache-Control</code>、 <code>Content-Language</code>、<code>Content-Type</code>、 <code>Expires</code>、<code>Last-Modified</code>， <code>Pragma</code>，如果要访问其他头，则需要服务器设置本响应头。<br><code>Access-Control-Expose-Headers</code> 头让服务器把允许浏览器访问的头放入白名单，例如:</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Access-Control-Expose Headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">authorization, a, b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样 JS 就能够访问指定的响应头了。</p>',52)]))}]]),k=JSON.parse('{"path":"/posts/moreThanCode/network/crossDomain-CORS.html","title":"跨域-CORS","lang":"zh-CN","frontmatter":{"title":"跨域-CORS","icon":"mage:television-cross","order":9,"category":["网络"],"description":"概述 CORS 是基于 http1.1 的一种跨域解决方案，它的全称是 Cross-0rigin Resource Sharing，跨域资源共享。 它的总体思路是:如果浏览器要跨域访问服务器的资源，需要获得服务器的允许 image-20240226132622272image-20240226132622272 而要知道，一个请求可以附带很多信息，从而...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/moreThanCode/network/crossDomain-CORS.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"跨域-CORS"}],["meta",{"property":"og:description","content":"概述 CORS 是基于 http1.1 的一种跨域解决方案，它的全称是 Cross-0rigin Resource Sharing，跨域资源共享。 它的总体思路是:如果浏览器要跨域访问服务器的资源，需要获得服务器的允许 image-20240226132622272image-20240226132622272 而要知道，一个请求可以附带很多信息，从而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T15:00:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T15:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域-CORS\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-01T15:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"简单请求","slug":"简单请求","link":"#简单请求","children":[{"level":3,"title":"简单请求的判定","slug":"简单请求的判定","link":"#简单请求的判定","children":[]},{"level":3,"title":"简单请求的交互规范","slug":"简单请求的交互规范","link":"#简单请求的交互规范","children":[]}]},{"level":2,"title":"需要预检的请求","slug":"需要预检的请求","link":"#需要预检的请求","children":[]},{"level":2,"title":"附带身份凭证的请求","slug":"附带身份凭证的请求","link":"#附带身份凭证的请求","children":[]},{"level":2,"title":"一个额外的补充","slug":"一个额外的补充","link":"#一个额外的补充","children":[]}],"git":{"createdTime":1739717238000,"updatedTime":1740841217000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":4,"url":"https://github.com/damiaoxi"}]},"readingTime":{"minutes":6.91,"words":2073},"localizedDate":"2025年2月16日","excerpt":"<h2>概述</h2>\\n<p>CORS 是基于 http1.1 的一种跨域解决方案，它的全称是 Cross-0rigin Resource Sharing，跨域资源共享。</p>\\n<p>它的总体思路是:如果浏览器要跨域访问服务器的资源，需要获得服务器的允许</p>\\n<figure><figcaption>image-20240226132622272</figcaption></figure>\\n<p>而要知道，一个请求可以附带很多信息，从而会对服务器造成不同程度的影响比如有的请求只是获取一些新闻，有的请求会改动服务器的数据。</p>\\n<p>针对不同的请求，CORS 规定了三种不同的交互模式，分别是:</p>","autoDesc":true}')}}]);