"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[838],{66262:(e,o)=>{o.A=(e,o)=>{const i=e.__vccOpts||e;for(const[e,c]of o)i[e]=c;return i}},32599:(e,o,i)=>{i.r(o),i.d(o,{comp:()=>n,data:()=>a});var c=i(20641);const t={},n=(0,i(66262).A)(t,[["render",function(e,o){return(0,c.uX)(),(0,c.CE)("div",null,o[0]||(o[0]=[(0,c.Fv)('<h2 id="i-配置文件类型" tabindex="-1"><a class="header-anchor" href="#i-配置文件类型"><span>Ⅰ.配置文件类型</span></a></h2><p>Babel 有两种平行的配置文件格式，这两种格式可以一起用，也可以独立存在。</p><ul><li><p>项目级配置文件（Project-wide configuration）</p><ul><li><code>babel.config.json</code> 配置文件。这种配置文件可以用不同的尾缀，如 <code>.js</code>，<code>.cjs</code>，<code>.mjs</code>。</li></ul></li><li><p>文件相关配置文件（File-relative configuration）</p><ul><li><code>.babelrc.json</code> 配置文件。这种配置文件可以用不同的尾缀 (<code>.babelrc</code>, <code>.js</code>, <code>.cjs</code>, <code>.mjs</code>)。</li><li><code>package.json</code> 文件中 <code>&quot;babel&quot; </code> 为 key 的配置项。</li></ul></li></ul><h2 id="ii-项目级配置文件-project-wide-configuration" tabindex="-1"><a class="header-anchor" href="#ii-项目级配置文件-project-wide-configuration"><span>Ⅱ. 项目级配置文件（Project-wide configuration）</span></a></h2><p>这是 Babel 7.x 版本以后的新配置文件格式。Babel 有一个&quot;根（root）&quot;目录的概念，默认的&quot;根&quot;目录为当前正在工作的目录。Babel会在这个根目录中自动搜索一个叫 <code>babel.config.json</code> ，或者一个使用<strong>支持的扩展名的等价文件</strong>。当然，用户可以使用显式的 &quot;configFile&quot; 值来覆盖默认的配置文件搜索行为。</p><h2 id="iii-文件相关配置文件-file-relative-configuration" tabindex="-1"><a class="header-anchor" href="#iii-文件相关配置文件-file-relative-configuration"><span>Ⅲ. 文件相关配置文件（File-relative configuration）</span></a></h2><h2 id="iv-支持拓展名的等价文件" tabindex="-1"><a class="header-anchor" href="#iv-支持拓展名的等价文件"><span>Ⅳ. 支持拓展名的等价文件？</span></a></h2><p>Babel 可以使用 Node.js 原生支持的任何文件拓展名的文件进行配置：你可以用 <code>.json</code>，<code>.js</code>，<code>.cjs</code>和<code>.mjs</code> 作为 <code>babel.config.json</code> 和 <code>.babelrc.json</code> 文件的尾缀。</p><ul><li><p><code>babel.config.json</code> 和 <code>.babelrc.json</code> 会被按照 JSON5 的格式解析，并且应该包含一个与Babel接受的选项格式匹配的对象。</p><p>建议在任何可能的情况下使用这种文件类型。JS 配置文件在应对在构建时有条件依赖或者以其他方式计算的复杂配置时是很方便的。 然而，其缺点是 JS 配置的静态可分析性较少，因此对缓存性、linting、IDE自动补全等有负面影响。</p><p>由于 <code>babel.config.json</code> 和 <code>.babelrc.json</code> 是静态文件，它允许其他使用 Babel 的工具，如 bundlers 可以安全地缓存 Babel 的结果，这对于巨大构建行为来说是一个巨大的胜利。</p></li><li><p><code>babel.config.cjs</code> 和 <code>.babelrc.cjs</code> 让你能够按照 CommonJS 的方式定义配置文件，使用 <code>module.exports</code>导出。仅在 <code>v7.7.0</code> 之后被支持。</p></li><li><p><code>babel.config.mjs</code> 和 <code>.babelrc.mjs</code> 使用原生 ECMAScript 模块化语法。仅在 Node.js 13.2 以上的版本被支持。需要注意的是原生 <code>ECMAScript</code> 模块时异步的（这就是为什么 <code>import()</code>常常返回一个 promise 对象），因为这个原因， <code>.mjs</code> 配置文件在同步调用 Babel 是被抛弃(throw ?)。仅在 <code>v7.8.0</code> 之后被支持。</p></li><li><p><code>babel.config.js</code> 和 <code>.babelrc.js</code> 当 你的 <code>package.json</code> 文件包含 <code>&quot;type&quot;: &quot;module&quot;</code> 选项是行为同 <code>.mjs</code> 结尾的文件，否则则同 <code>.cjs</code> 结尾的文件。</p></li></ul><p>JavaScript 配置文件可以 export 一个对象（object） 或者一个被调用时返回生成配置的函数（function），返回函数的配置文件被赋予了一些特殊的功能，因为函数能够访问Babel自身暴露的API。参考 <a href="https://www.babeljs.cn/docs/config-files#config-function-api" target="_blank" rel="noopener noreferrer">配置函数API</a> 获取更多信息。</p><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h2><p><a href="https://gitee.com/damiaoxi/stars/tree/master/Babel/02.Babel_configuration/code" target="_blank" rel="noopener noreferrer">https://gitee.com/damiaoxi/stars/tree/master/Babel/02.Babel_configuration/code</a></p>',12)]))}]]),a=JSON.parse('{"path":"/posts/web/frontend-engineering/babel/babel-configuration.html","title":"配置文件","lang":"zh-CN","frontmatter":{"title":"配置文件","icon":"simple-icons:babel","order":2,"category":["Babel"],"description":"Ⅰ.配置文件类型 Babel 有两种平行的配置文件格式，这两种格式可以一起用，也可以独立存在。 项目级配置文件（Project-wide configuration） babel.config.json 配置文件。这种配置文件可以用不同的尾缀，如 .js，.cjs，.mjs。 文件相关配置文件（File-relative configuration） ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/web/frontend-engineering/babel/babel-configuration.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"配置文件"}],["meta",{"property":"og:description","content":"Ⅰ.配置文件类型 Babel 有两种平行的配置文件格式，这两种格式可以一起用，也可以独立存在。 项目级配置文件（Project-wide configuration） babel.config.json 配置文件。这种配置文件可以用不同的尾缀，如 .js，.cjs，.mjs。 文件相关配置文件（File-relative configuration） ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T08:23:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T08:23:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配置文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T08:23:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Ⅰ.配置文件类型","slug":"i-配置文件类型","link":"#i-配置文件类型","children":[]},{"level":2,"title":"Ⅱ. 项目级配置文件（Project-wide configuration）","slug":"ii-项目级配置文件-project-wide-configuration","link":"#ii-项目级配置文件-project-wide-configuration","children":[]},{"level":2,"title":"Ⅲ. 文件相关配置文件（File-relative configuration）","slug":"iii-文件相关配置文件-file-relative-configuration","link":"#iii-文件相关配置文件-file-relative-configuration","children":[]},{"level":2,"title":"Ⅳ. 支持拓展名的等价文件？","slug":"iv-支持拓展名的等价文件","link":"#iv-支持拓展名的等价文件","children":[]},{"level":2,"title":"Demo","slug":"demo","link":"#demo","children":[]}],"git":{"createdTime":1745834365000,"updatedTime":1755332630000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":3,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":2.44,"words":731},"localizedDate":"2025年4月28日","excerpt":"<h2>Ⅰ.配置文件类型</h2>\\n<p>Babel 有两种平行的配置文件格式，这两种格式可以一起用，也可以独立存在。</p>\\n<ul>\\n<li>\\n<p>项目级配置文件（Project-wide configuration）</p>\\n<ul>\\n<li><code>babel.config.json</code> 配置文件。这种配置文件可以用不同的尾缀，如 <code>.js</code>，<code>.cjs</code>，<code>.mjs</code>。</li>\\n</ul>\\n</li>\\n<li>\\n<p>文件相关配置文件（File-relative configuration）</p>\\n<ul>\\n<li><code>.babelrc.json</code> 配置文件。这种配置文件可以用不同的尾缀 (<code>.babelrc</code>, <code>.js</code>, <code>.cjs</code>, <code>.mjs</code>)。</li>\\n<li><code>package.json</code> 文件中 <code>\\"babel\\" </code> 为 key 的配置项。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);