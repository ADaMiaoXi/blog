"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[9030],{66262:(i,e)=>{e.A=(i,e)=>{const a=i.__vccOpts||i;for(const[i,n]of e)a[i]=n;return a}},45052:(i,e,a)=>{a.r(e),a.d(e,{comp:()=>k,data:()=>b});var n=a(20641);const s=a.p+"assets/img/file_1.43aa34e6.png",p=a.p+"assets/img/file_2.c8bff57d.png",t=a.p+"assets/img/copy_file.91b9367c.png",l=a.p+"assets/img/hard_link.2b3351ce.png",d=a.p+"assets/img/symbol_link.9aea7a7f.png",o=a.p+"assets/img/pnpm_1.5d9ee0c1.png",r=a.p+"assets/img/pnpm_2.a0459b7f.png",h=a.p+"assets/img/pnpm_3.a6a88ae2.png",c=a.p+"assets/img/pnpm_4.32d504e6.png",g=a.p+"assets/img/pnpm_5.0fef4a66.png",m={},k=(0,a(66262).A)(m,[["render",function(i,e){return(0,n.uX)(),(0,n.CE)("div",null,e[0]||(e[0]=[(0,n.Fv)('<p>pnpm 是一个基于 npm 的包管理工具，其与 npm 和 yarn 相比具有以下优势：</p><ol><li>安装效率高于 npm 和 yarn</li><li><code>node_modules</code> 采用树状结构，更加简洁，同时避免了开发时使用间接依赖的问题</li><li>使用缓存和链接，极大的降低磁盘空间的占用</li></ol><h2 id="安装-使用" tabindex="-1"><a class="header-anchor" href="#安装-使用"><span>安装/使用</span></a></h2><p>pnpm 需要使用 npm 进行全局安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pnpm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 pnpm 只需要将 <code>npm</code> 命令替换为 <code>pnpm</code> 命令即可，如果需要执行本地 CLI，使用 <code>pnpx</code> 指令即可。（使用 <code>pnpx</code> 执行一个需要安装的命令时，会使用 <code>pnpm</code> 进行安装）。</p><h2 id="pnpm-的原理" tabindex="-1"><a class="header-anchor" href="#pnpm-的原理"><span>pnpm 的原理</span></a></h2><h3 id="文件与链接" tabindex="-1"><a class="header-anchor" href="#文件与链接"><span>文件与链接</span></a></h3><h4 id="文件的本质" tabindex="-1"><a class="header-anchor" href="#文件的本质"><span>文件的本质</span></a></h4><p>操作系统中，文件实际上是一个指针，其指向一个外部存储地址（硬盘、U 盘、网络...）：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>删除文件时，删除的实际上是指针：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="文件的拷贝" tabindex="-1"><a class="header-anchor" href="#文件的拷贝"><span>文件的拷贝</span></a></h4><p>复制一个文件，是将该文件指针指向的内容进行复制，然后产生一个新文件指向新的内容：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="硬链接-hard-link" tabindex="-1"><a class="header-anchor" href="#硬链接-hard-link"><span>硬链接（hard link）</span></a></h4><p>硬链接的概念来自于 Unix 操作系统，它是指将一个文件 A 指针复制到另一个文件 B 指针中，文件 B 就是文件 A 的硬链接</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建硬链接不会产生额外的磁盘占用，两个文件指向同一个磁盘内容。</p><p>硬链接的数量没有限制，可以为同一个文件产生多个硬链接</p><p>Windows 从 Vista 版本开始支持创建硬链接的操作，在 cmd 中使用以下指令创建硬链接：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mklink</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> link_file_path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> original_file_path</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>文件夹（目录）不存在问价内容，所以文件夹（目录）无法创建硬链接<br> Windows 操作系统中，不要跨盘符创建硬链接</p></blockquote><h4 id="符号链接-软连接-symbol-link" tabindex="-1"><a class="header-anchor" href="#符号链接-软连接-symbol-link"><span>符号链接/软连接（symbol link）</span></a></h4><p>符号链接又称为软连接，如果为某个文件或文件夹 A 创建符号连接 B，则 B 指向 A：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Windows 从 Vista 版本开始支持创建符号链接的操作，在 cmd 中使用以下指令创建硬链接：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mklink</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> link_file_path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> original_file_path</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /d表示创建的是目录的符号链接，不写则是文件的符号链接</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>早期的 Windows 系统不支持符号链接，但是提供了一个工具 junction 来达到类似的功能。</p></blockquote><h4 id="硬链接与符号链接的区别" tabindex="-1"><a class="header-anchor" href="#硬链接与符号链接的区别"><span>硬链接与符号链接的区别</span></a></h4><ol><li>硬链接仅可以额链接文件，符号链接还可以链接目录</li><li>硬链接在建立之后仅和文件实际存储块有关，与之前的文件无关。符号链接始终与之前的文件关联，与文件实际存储块无关。</li></ol><h4 id="快捷方式" tabindex="-1"><a class="header-anchor" href="#快捷方式"><span>快捷方式</span></a></h4><p>快捷方式类似于符号链接，是 Windows 系统早期就支持的链接方式,也是 Windows 系统独有的链接方式。</p><p>快捷方式不仅仅是一个指向其他文件或目录的指针，还包含了其他信息：如权限、兼容性启动方式等其他属性。</p><h4 id="node-环境对硬链接和符号链接的处理" tabindex="-1"><a class="header-anchor" href="#node-环境对硬链接和符号链接的处理"><span>Node 环境对硬链接和符号链接的处理</span></a></h4><p><strong>硬链接</strong>：硬链接是一个实实在在的文件，node 不对其做任何特殊处理，也无法区别对待（node 无法判断该文件是一个硬链接还是源文件，因为两者没有区别）</p><p><strong>符号链接</strong>：由于符号链接指向的是另一个文件或目录，当 node 执行符号链接下的 JS 文件是在原始路径下执行的。</p><h3 id="pnpm-的构建方式" tabindex="-1"><a class="header-anchor" href="#pnpm-的构建方式"><span>pnpm 的构建方式</span></a></h3><p>pnpm 使用<strong>符号链接</strong>和<strong>硬链接</strong>来构建 <code>node_modules</code> 目录。</p><p>已一个例子说明构建方式：</p><p>假设两个包 <code>a</code> 和 <code>b</code>，<code>a</code> 依赖 <code>b</code>：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假设工程为 proj，其直接依赖 <code>a</code>，项目安装依赖的时候 pnpm 会做以下处理：</p><ol><li>查询依赖关系，得到最终要安装的包：<code>a</code> 和 <code>b</code>。</li><li>查看 <code>a</code> 和 <code>b</code> 是否已经有缓存，如果没有，下载到缓存中，如果有，则进入下一步。</li><li>创建 <code>node_modules</code> 目录，并对目录进行结构初始化：</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4.从缓存的对应包中使用硬链接放置文件到相应包代码目录中：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5.使用符号链接，将每个包的直接依赖放置到自己的目录中：</p><p><img src="'+c+'" alt="" loading="lazy"><br> 这样做是为了保证 <code>a</code> 的代码在执行过程中，可以读取到它们的直接依赖。</p><ol start="6"><li><p>pnpm 为了解决一些书写不规范的包（读取间接依赖）的问题，又将所有的工程非直接依赖，使用符号链接加入到了 <code>.pnpm/node_modules</code> 中。<br> 在本例中没有必要使用这个 <code>node_modules</code>，但是如果 <code>b</code> 依赖 <code>c</code>，<code>a</code> 又要直接用 <code>c</code>，面对这种不规范的依赖引用， pnpm 通过这种方式支持了。</p><blockquote><p>直接使用绝对路径引用以来的写法，pnpm 没办法支持。</p></blockquote></li><li><p>在工程的 <code>node_modules</code> 目录中使用符号链接，放置直接依赖:<br><img src="'+g+'" alt="" loading="lazy"></p></li></ol>',51)]))}]]),b=JSON.parse('{"path":"/posts/web/frontend-engineering/package-manager/pnpm.html","title":"pnpm","lang":"zh-CN","frontmatter":{"title":"pnpm","icon":"logos:pnpm","order":3,"category":["Package manager"],"description":"pnpm 是一个基于 npm 的包管理工具，其与 npm 和 yarn 相比具有以下优势： 安装效率高于 npm 和 yarn node_modules 采用树状结构，更加简洁，同时避免了开发时使用间接依赖的问题 使用缓存和链接，极大的降低磁盘空间的占用 安装/使用 pnpm 需要使用 npm 进行全局安装： 使用 pnpm 只需要将 npm 命令替换...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/web/frontend-engineering/package-manager/pnpm.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"pnpm"}],["meta",{"property":"og:description","content":"pnpm 是一个基于 npm 的包管理工具，其与 npm 和 yarn 相比具有以下优势： 安装效率高于 npm 和 yarn node_modules 采用树状结构，更加简洁，同时避免了开发时使用间接依赖的问题 使用缓存和链接，极大的降低磁盘空间的占用 安装/使用 pnpm 需要使用 npm 进行全局安装： 使用 pnpm 只需要将 npm 命令替换..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T08:23:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T08:23:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pnpm\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T08:23:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"安装/使用","slug":"安装-使用","link":"#安装-使用","children":[]},{"level":2,"title":"pnpm 的原理","slug":"pnpm-的原理","link":"#pnpm-的原理","children":[{"level":3,"title":"文件与链接","slug":"文件与链接","link":"#文件与链接","children":[]},{"level":3,"title":"pnpm 的构建方式","slug":"pnpm-的构建方式","link":"#pnpm-的构建方式","children":[]}]}],"git":{"createdTime":1754472354000,"updatedTime":1755332630000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":2,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":4.29,"words":1287},"localizedDate":"2025年8月6日","excerpt":"<p>pnpm 是一个基于 npm 的包管理工具，其与 npm 和 yarn 相比具有以下优势：</p>\\n<ol>\\n<li>安装效率高于 npm 和 yarn</li>\\n<li><code>node_modules</code> 采用树状结构，更加简洁，同时避免了开发时使用间接依赖的问题</li>\\n<li>使用缓存和链接，极大的降低磁盘空间的占用</li>\\n</ol>\\n<h2>安装/使用</h2>\\n<p>pnpm 需要使用 npm 进行全局安装：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">npm</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -g</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> pnpm</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);