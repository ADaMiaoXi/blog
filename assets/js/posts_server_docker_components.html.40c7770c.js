"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[2754],{66262:(e,o)=>{o.A=(e,o)=>{const t=e.__vccOpts||e;for(const[e,r]of o)t[e]=r;return t}},17323:(e,o,t)=>{t.r(o),t.d(o,{comp:()=>a,data:()=>i});var r=t(20641);const n={},a=(0,t(66262).A)(n,[["render",function(e,o){const t=(0,r.g2)("font");return(0,r.uX)(),(0,r.CE)("div",null,[o[11]||(o[11]=(0,r.Lk)("h2",{id:"镜像-image",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#镜像-image"},[(0,r.Lk)("span",null,"镜像(image)")])],-1)),o[12]||(o[12]=(0,r.Lk)("p",null,"Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。",-1)),o[13]||(o[13]=(0,r.Lk)("p",null,"它也相当于是一个 root 文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。",-1)),o[14]||(o[14]=(0,r.Lk)("p",null,"相当于容器的“源代码”，docker 镜像文件类似于 Java 的类模板，而 docker 容器实例类似于 java 中 new 出来的实例对象。",-1)),o[15]||(o[15]=(0,r.Lk)("h2",{id:"容器-container",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#容器-container"},[(0,r.Lk)("span",null,"容器(container)")])],-1)),(0,r.Lk)("ol",null,[(0,r.Lk)("li",null,[(0,r.Lk)("p",null,[o[1]||(o[1]=(0,r.eW)("从面向对象角度")),o[2]||(o[2]=(0,r.Lk)("br",null,null,-1)),o[3]||(o[3]=(0,r.eW)(" Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，")),(0,r.bF)(t,{color:"red"},{default:(0,r.k6)((()=>o[0]||(o[0]=[(0,r.eW)("容器是用镜像创建的运行实例")]))),_:1}),o[4]||(o[4]=(0,r.eW)("。就像是 Java 中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台"))])]),(0,r.Lk)("li",null,[o[6]||(o[6]=(0,r.Lk)("p",null,"从镜像容器角度",-1)),(0,r.bF)(t,{color:"red"},{default:(0,r.k6)((()=>o[5]||(o[5]=[(0,r.eW)("可以把容器看做是一个简易版的 Linux 环境")]))),_:1}),o[7]||(o[7]=(0,r.eW)("（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。"))])]),o[16]||(o[16]=(0,r.Lk)("h2",{id:"仓库-repository",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#仓库-repository"},[(0,r.Lk)("span",null,"仓库(repository)")])],-1)),(0,r.Lk)("p",null,[o[9]||(o[9]=(0,r.eW)("仓库（Repository）是")),(0,r.bF)(t,{color:"red"},{default:(0,r.k6)((()=>o[8]||(o[8]=[(0,r.eW)("集中存放镜像")]))),_:1}),o[10]||(o[10]=(0,r.eW)("文件的地方。"))]),o[17]||(o[17]=(0,r.Lk)("p",null,[(0,r.eW)("类似于"),(0,r.Lk)("br"),(0,r.eW)(" Maven 仓库，存放各种 jar 包的地方；"),(0,r.Lk)("br"),(0,r.eW)(" github 仓库，存放各种 git 项目的地方；"),(0,r.Lk)("br"),(0,r.eW)(" Docker 公司提供的官方 registry 被称为 Docker Hub，存放各种镜像模板的地方。")],-1)),o[18]||(o[18]=(0,r.Lk)("p",null,[(0,r.eW)("仓库分为公开仓库（Public）和私有仓库（Private）两种形式。"),(0,r.Lk)("br"),(0,r.eW)(" 最大的公开仓库是 Docker Hub("),(0,r.Lk)("a",{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},"https://hub.docker.com/"),(0,r.eW)(")，"),(0,r.Lk)("br"),(0,r.eW)(" 存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等")],-1))])}]]),i=JSON.parse('{"path":"/posts/server/docker/components.html","title":"基本组成","lang":"zh-CN","frontmatter":{"title":"基本组成","icon":"clarity:command-line","order":2,"category":["Docker"],"description":"镜像(image) Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 它也相当于是一个 root 文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。 相当于容器的“源代码”，docker 镜像文件类似于 Java 的类模板，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/server/docker/components.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"基本组成"}],["meta",{"property":"og:description","content":"镜像(image) Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 它也相当于是一个 root 文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。 相当于容器的“源代码”，docker 镜像文件类似于 Java 的类模板，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-19T00:19:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-19T00:19:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本组成\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-19T00:19:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"镜像(image)","slug":"镜像-image","link":"#镜像-image","children":[]},{"level":2,"title":"容器(container)","slug":"容器-container","link":"#容器-container","children":[]},{"level":2,"title":"仓库(repository)","slug":"仓库-repository","link":"#仓库-repository","children":[]}],"git":{"createdTime":1747613942000,"updatedTime":1747613942000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":1,"url":"https://github.com/damiaoxi"}]},"readingTime":{"minutes":1.64,"words":493},"localizedDate":"2025年5月19日","excerpt":"<h2>镜像(image)</h2>\\n<p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p>\\n<p>它也相当于是一个 root 文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。</p>\\n<p>相当于容器的“源代码”，docker 镜像文件类似于 Java 的类模板，而 docker 容器实例类似于 java 中 new 出来的实例对象。</p>\\n<h2>容器(container)</h2>\\n<ol>\\n<li>\\n<p>从面向对象角度<br>\\nDocker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，。就像是 Java 中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p>\\n</li>\\n<li>\\n<p>从镜像容器角度</p>\\n（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</li>\\n</ol>","autoDesc":true}')}}]);