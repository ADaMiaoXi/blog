"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[7016],{66262:(i,s)=>{s.A=(i,s)=>{const t=i.__vccOpts||i;for(const[i,e]of s)t[i]=e;return t}},40437:(i,s,t)=>{t.r(s),t.d(s,{comp:()=>a,data:()=>n});var e=t(20641);const l={},a=(0,t(66262).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="请求方法的本质" tabindex="-1"><a class="header-anchor" href="#请求方法的本质"><span>请求方法的本质</span></a></h2><p>请求方法是请求行中的第一个单词，它向服务器描述了客户发出请求的动作类型。在 HTTP 协议中，不同的请求方法只是包含了不同的语义，但服务器和浏览器的一些约定俗成的行为造成了它们具体的区别。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      method</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;getPic&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 告诉百度，这次请求是来嘿嘿嘿的</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的请求中，我们使用了自定义方法 <code>getPic</code>。虽然百度服务器无法理解这是什么，但这样的请求也是可以正常发送到百度服务器的。</p><p>在实践中，客户端和服务器慢慢形成了一个共识，约定俗成的规定了一些常见的请求方法：</p><ul><li><strong>GET</strong>：表示向服务器获取资源。业务数据在请求行中，无需请求体。</li><li><strong>POST</strong>：表示向服务器提交数据，通常用于产生新的数据，比如注册。业务数据在请求体中。</li><li><strong>PUT</strong>：表示希望修改服务器的数据，通常用于修改，业务数据在请求体中。</li><li><strong>DELETE</strong>：表示希望删除服务器的数据。业务数据在请求行中，无需请求体。</li><li><strong>OPTIONS</strong>：发生在跨域的预检请求中，表示客户端向服务器申请跨域提交。</li><li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试和诊断。</li><li><strong>CONNECT</strong>：用于建立链接管道，通江在代理场景中使用，网页中很少用到。</li></ul><h2 id="get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-的区别"><span>GET 和 POST 的区别</span></a></h2><p>由于浏览器和服务器约定俗称的规则，造成了 GET 和 POST 在 web 中的区别：</p><ol><li>浏览器在发送 GET 请求时，不会附带请求体。</li><li>GET 请求的传递信息量有限（各个浏览器的限制不一样），适合传递少量数据；POST 请求没有限制。</li><li>GET 请求只能传递 ASCII 数据（浏览器规定请求行和请求头中只能是 ASCII 数据），遇到非 ASCII 数据需要进行编码（浏览器自动进行编码），POST 请求没有限制。</li><li>大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中。</li><li>刷新页面时，若当前页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。</li><li>GET 请求的地址可以被保存为浏览器书签，POST 不可以（书签保存不会保存请求体）</li></ol><h2 id="问答" tabindex="-1"><a class="header-anchor" href="#问答"><span>问答</span></a></h2><ol><li><p>http 常见请求反方有哪些？</p><blockquote><p>参考答案：</p><ul><li>GET，表示向服务器获取资源</li><li>POST，表示向服务器提交信息，通常用于产生新的数据，比如注册</li><li>PUT：表示希望修改服务器的数据，通常用于修改</li><li>DELETE：表示希望删除服务器的数据</li><li>OPTIONS：发生在跨域与监测请求中，表示客户端向服务器申请跨域提交</li><li>TRACE：回显服务器接到的请求，主要用于测试和诊断</li><li>CONNECT：用于建立链接管道，通常在代理场景中使用，网页中很少用到</li></ul></blockquote></li><li><p>GET 和 POST 的区别</p><blockquote><p>参考答案：</p><ol><li>浏览器在发送 GET 请求时，不会附带请求体。</li><li>GET 请求的传递信息量有限（各个浏览器的限制不一样），适合传递少量数据；POST 请求没有限制。</li><li>GET 请求只能传递 ASCII 数据（浏览器规定请求行和请求头中只能是 ASCII 数据），遇到非 ASCII 数据需要进行编码（浏览器自动进行编码），POST 请求没有限制。</li><li>大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中。</li><li>刷新页面时，若当前页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。</li><li>GET 请求的地址可以被保存为浏览器书签，POST 不可以（书签保存不会保存请求体）</li></ol></blockquote></li></ol>',11)]))}]]),n=JSON.parse('{"path":"/posts/moreThanCode/network/requestMethods.html","title":"常见请求方法","lang":"zh-CN","frontmatter":{"title":"常见请求方法","icon":"tabler:http-post","order":2,"category":["网络"],"description":"请求方法的本质 请求方法是请求行中的第一个单词，它向服务器描述了客户发出请求的动作类型。在 HTTP 协议中，不同的请求方法只是包含了不同的语义，但服务器和浏览器的一些约定俗成的行为造成了它们具体的区别。 上面的请求中，我们使用了自定义方法 getPic。虽然百度服务器无法理解这是什么，但这样的请求也是可以正常发送到百度服务器的。 在实践中，客户端和服...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/moreThanCode/network/requestMethods.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"常见请求方法"}],["meta",{"property":"og:description","content":"请求方法的本质 请求方法是请求行中的第一个单词，它向服务器描述了客户发出请求的动作类型。在 HTTP 协议中，不同的请求方法只是包含了不同的语义，但服务器和浏览器的一些约定俗成的行为造成了它们具体的区别。 上面的请求中，我们使用了自定义方法 getPic。虽然百度服务器无法理解这是什么，但这样的请求也是可以正常发送到百度服务器的。 在实践中，客户端和服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-01T15:00:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-01T15:00:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见请求方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-01T15:00:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"请求方法的本质","slug":"请求方法的本质","link":"#请求方法的本质","children":[]},{"level":2,"title":"GET 和 POST 的区别","slug":"get-和-post-的区别","link":"#get-和-post-的区别","children":[]},{"level":2,"title":"问答","slug":"问答","link":"#问答","children":[]}],"git":{"createdTime":1739717238000,"updatedTime":1740841217000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":4,"url":"https://github.com/damiaoxi"}]},"readingTime":{"minutes":3.8,"words":1140},"localizedDate":"2025年2月16日","excerpt":"<h2>请求方法的本质</h2>\\n<p>请求方法是请求行中的第一个单词，它向服务器描述了客户发出请求的动作类型。在 HTTP 协议中，不同的请求方法只是包含了不同的语义，但服务器和浏览器的一些约定俗成的行为造成了它们具体的区别。</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">fetch</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\'https://www.baidu.com\'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">      method</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\\">:</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \'getPic\'</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 告诉百度，这次请求是来嘿嘿嘿的</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">})</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);