"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[4301],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},53271:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>c,data:()=>g});var n=a(20641);const l=a.p+"assets/img/flyweight-zh.a956fa63.png",e=a.p+"assets/img/problem-zh.06f221a0.png",t=a.p+"assets/img/solution1-zh.cf800a71.png",p=a.p+"assets/img/solution3-zh.f0fd696f.png",h=a.p+"assets/img/solution2-zh.9d8fe87c.png",r=a.p+"assets/img/structure.f2e202ab.png",k=a.p+"assets/img/example.87e41b90.png",d={},c=(0,a(66262).A)(d,[["render",function(i,s){const a=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[s[15]||(s[15]=(0,n.Fv)('<h2 id="意图" tabindex="-1"><a class="header-anchor" href="#意图"><span>意图</span></a></h2><p>享元模式是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图上穿行， 为玩家提供紧张刺激的游戏体验。</p><p>开发完成后， 你推送提交了最新版本的程序， 并在编译游戏后将其发送给了一个朋友进行测试。 尽管该游戏在你的电脑上完美运行， 但是你的朋友却无法长时间进行游戏： 游戏总是会在他的电脑上运行几分钟后崩溃。 在研究了几个小时的调试消息记录后， 你发现导致游戏崩溃的原因是内存容量不足。 朋友的设备性能远比不上你的电脑， 因此游戏运行在他的电脑上时很快就会出现问题。</p><p>真正的问题与粒子系统有关。 每个粒子 （一颗子弹、 一枚导弹或一块弹片） 都由包含完整数据的独立对象来表示。 当玩家在游戏中鏖战进入高潮后的某一时刻， 游戏将无法在剩余内存中载入新建粒子， 于是程序就崩溃了。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>仔细观察<code>粒子Particle</code>类， 你可能会注意到颜色 （color） 和精灵图 （sprite）这两个成员变量所消耗的内存要比其他变量多得多。 更糟糕的是， 对于所有的粒子来说， 这两个成员变量所存储的数据几乎完全一样 （比如所有子弹的颜色和精灵图都一样）。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每个粒子的另一些状态 （坐标、 移动矢量和速度） 则是不同的。 因为这些成员变量的数值会不断变化。 这些数据代表粒子在存续期间不断变化的情景， 但每个粒子的颜色和精灵图则会保持不变。</p><p>对象的常量数据通常被称为内在状态， 其位于对象中， 其他对象只能读取但不能修改其数值。 而对象的其他状态常常能被其他对象 “从外部” 改变， 因此被称为外在状态。</p><p>享元模式建议不在对象中存储外在状态， 而是将其传递给依赖于它的一个特殊方法。 程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态 （与外在状态相比， 内在状态的变体要少很多）， 因此你所需的对象数量会大大削减。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>让我们回到游戏中。 假如能从粒子类中抽出外在状态， 那么我们只需三个不同的对象 （子弹、 导弹和弹片） 就能表示游戏中的所有粒子。 你现在很可能已经猜到了， 我们将这样一个仅存储内在状态的对象称为享元。</p><h3 id="外在状态存储" tabindex="-1"><a class="header-anchor" href="#外在状态存储"><span><strong>外在状态存储</strong></span></a></h3><p>那么外在状态会被移动到什么地方呢？ 总得有类来存储它们， 对不对？ 在大部分情况中， 它们会被移动到容器对象中， 也就是我们应用享元模式前的聚合对象中。</p><p>在我们的例子中， 容器对象就是主要的<code>游戏Game</code>对象， 其会将所有粒子存储在名为<code>粒子particles</code>的成员变量中。 为了能将外在状态移动到这个类中， 你需要创建多个数组成员变量来存储每个粒子的坐标、 方向矢量和速度。 除此之外， 你还需要另一个数组来存储指向代表粒子的特定享元的引用。 这些数组必须保持同步， 这样你才能够使用同一索引来获取关于某个粒子的所有数据。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更优雅的解决方案是创建独立的情景类来存储外在状态和对享元对象的引用。 在该方法中， 容器类只需包含一个数组。</p><p>稍等！ 这样的话情景对象数量不是会和不采用该模式时的对象数量一样多吗？ 的确如此， 但这些对象要比之前小很多。 消耗内存最多的成员变量已经被移动到很少的几个享元对象中了。 现在， 一个享元大对象会被上千个情境小对象复用， 因此无需再重复存储数千个大对象的数据。</p><h3 id="享元与不可变性" tabindex="-1"><a class="header-anchor" href="#享元与不可变性"><span><strong>享元与不可变性</strong></span></a></h3><p>由于享元对象可在不同的情景中使用， 你必须确保其状态不能被修改。 享元类的状态只能由构造函数的参数进行一次性初始化， 它不能对其他对象公开其设置器或公有成员变量。</p><h3 id="享元工厂" tabindex="-1"><a class="header-anchor" href="#享元工厂"><span><strong>享元工厂</strong></span></a></h3><p>为了能更方便地访问各种享元， 你可以创建一个工厂方法来管理已有享元对象的缓存池。 工厂方法从客户端处接收目标享元对象的内在状态作为参数， 如果它能在缓存池中找到所需享元， 则将其返回给客户端； 如果没有找到， 它就会新建一个享元， 并将其添加到缓存池中。</p><p>你可以选择在程序的不同地方放入该函数。 最简单的选择就是将其放置在享元容器中。 除此之外， 你还可以新建一个工厂类， 或者创建一个静态的工厂方法并将其放入实际的享元类中。</p><h2 id="享元模式结构" tabindex="-1"><a class="header-anchor" href="#享元模式结构"><span>享元模式结构</span></a></h2><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>享元模式只是一种优化。 在应用该模式之前， 你要确定程序中存在与大量类似对象同时占用内存相关的内存消耗问题， 并且确保该问题无法使用其他更好的方式来解决。</li><li><strong>享元</strong> （Flyweight） 类包含原始对象中部分能在多个对象中共享的状态。 同一享元对象可在许多不同情景中使用。 享元中存储的状态被称为 “内在状态”。 传递给享元方法的状态被称为 “外在状态”。</li><li><strong>情景</strong> （Context） 类包含原始对象中各不相同的外在状态。 情景与享元对象组合在一起就能表示原始对象的全部状态。</li><li>通常情况下， 原始对象的行为会保留在享元类中。 因此调用享元方法必须提供部分外在状态作为参数。 但你也可将行为移动到情景类中， 然后将连入的享元作为单纯的数据对象。</li><li><strong>客户端</strong> （Client） 负责计算或存储享元的外在状态。 在客户端看来， 享元是一种可在运行时进行配置的模板对象， 具体的配置方式为向其方法中传入一些情景数据参数。</li><li><strong>享元工厂</strong> （Flyweight Factory） 会对已有享元的缓存池进行管理。 有了工厂后， 客户端就无需直接创建享元， 它们只需调用工厂并向其传递目标享元的一些内在状态即可。 工厂会根据参数在之前已创建的享元中进行查找， 如果找到满足条件的享元就将其返回； 如果没有找到就根据参数新建享元。</li></ol><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码"><span>伪代码</span></a></h2><p>在本例中， <strong>享元</strong>模式能有效减少在画布上渲染数百万个树状对象时所需的内存。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该模式从主要的<code>树Tree</code>类中抽取内在状态， 并将其移动到享元类<code>树种类Tree­Type</code>之中。</p><p>最初程序需要在多个对象中存储相同数据， 而现在仅需在几个享元对象中保存数据， 然后在作为情景的 <code>树</code>对象中连入享元即可。 客户端代码使用享元工厂创建树对象并封装搜索指定对象的复杂行为， 并能在需要时复用对象。</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 享元类包含一个树的部分状态。这些成员变量保存的数值对于特定树而言是唯一</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 的。例如，你在这里找不到树的坐标。但这里有很多树木之间所共有的纹理和颜</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 色。由于这些数据的体积通常非常大，所以如果让每棵树都其进行保存的话将耗</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 费大量内存。因此，我们可将纹理、颜色和其他重复数据导出到一个单独的对象</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 中，然后让众多的单个树对象去引用它。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TreeType </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field name</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field color</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field texture</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    constructor </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">TreeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, color, texture) { …… }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    method </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">draw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(canvas, x, y) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 1. 创建特定类型、颜色和纹理的位图。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 2. 在画布坐标 (X,Y) 处绘制位图。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 享元工厂决定是否复用已有享元或者创建一个新的对象。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TreeFactory </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    static field treeTypes: collection of tree types</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    static method </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getTreeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, color, texture) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> treeTypes.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, color, texture)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> null)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">            type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">TreeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, color, texture)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            treeTypes.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> type</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 情景对象包含树状态的外在部分。程序中可以创建数十亿个此类对象，因为它们</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 体积很小：仅有两个整型坐标和一个引用成员变量。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Tree </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field x,y</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: TreeType</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    constructor </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Tree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, y, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { …… }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    method </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">draw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(canvas) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">draw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(canvas, this.x, this.y)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 树（Tree）和森林（Forest）类是享元的客户端。如果不打算继续对树类进行开</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 发，你可以将它们合并。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Forest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    field trees: collection of Trees</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    method </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">plantTree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, y, name, color, texture) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TreeFactory.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getTreeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, color, texture)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        tree </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Tree</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, y, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        trees.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tree)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    method </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">draw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(canvas) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (tree </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> trees) do</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            tree.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">draw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(canvas)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="享元模式优缺点" tabindex="-1"><a class="header-anchor" href="#享元模式优缺点"><span>享元模式优缺点</span></a></h2><p>√ 如果程序中有很多相似对象， 那么你将可以节省大量内存。<br> × 你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据。<br> × 代码会变得更加复杂。 团队中的新成员总是会问： ​ “为什么要像这样拆分一个实体的状态？”。</p><h2 id="与其他模式的关系" tabindex="-1"><a class="header-anchor" href="#与其他模式的关系"><span>与其他模式的关系</span></a></h2>',39)),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,[(0,n.Lk)("p",null,[s[1]||(s[1]=(0,n.eW)("你可以使用")),s[2]||(s[2]=(0,n.Lk)("strong",null,"享元模式",-1)),s[3]||(s[3]=(0,n.eW)("实现")),(0,n.bF)(a,{to:"/posts/brain-boom/design-patterns/structural/composite.html"},{default:(0,n.k6)((()=>s[0]||(s[0]=[(0,n.Lk)("strong",null,"组合模式",-1)]))),_:1}),s[4]||(s[4]=(0,n.eW)("树的共享叶节点以节省内存。"))])]),(0,n.Lk)("li",null,[(0,n.Lk)("p",null,[s[6]||(s[6]=(0,n.Lk)("strong",null,"享元",-1)),s[7]||(s[7]=(0,n.eW)("展示了如何生成大量的小型对象， ")),(0,n.bF)(a,{to:"/posts/brain-boom/design-patterns/structural/facade.html"},{default:(0,n.k6)((()=>s[5]||(s[5]=[(0,n.Lk)("strong",null,"外观模式",-1)]))),_:1}),s[8]||(s[8]=(0,n.eW)("则展示了如何用一个对象来代表整个子系统。"))])]),(0,n.Lk)("li",null,[(0,n.Lk)("p",null,[s[10]||(s[10]=(0,n.eW)("如果你能将对象的所有共享状态简化为一个享元对象， 那么")),s[11]||(s[11]=(0,n.Lk)("strong",null,"享元",-1)),s[12]||(s[12]=(0,n.eW)("就和")),(0,n.bF)(a,{to:"/posts/brain-boom/design-patterns/creational/singleton.html"},{default:(0,n.k6)((()=>s[9]||(s[9]=[(0,n.Lk)("strong",null,"单例模式",-1)]))),_:1}),s[13]||(s[13]=(0,n.eW)("类似了。 但这两个模式有两个根本性的不同。"))]),s[14]||(s[14]=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.eW)("只会有一个单例实体， 但是 "),(0,n.Lk)("em",null,"享元"),(0,n.eW)(" 类可以有多个实体， 各实体的内在状态也可以不同。")]),(0,n.Lk)("li",null,[(0,n.Lk)("em",null,"单例"),(0,n.eW)(" 对象可以是可变的。 享元对象是不可变的。")])],-1))])])])}]]),g=JSON.parse('{"path":"/posts/brain-boom/design-patterns/structural/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","icon":"/assets/images/brain-boom/design-patterns/structural/flyweight/flyweight-mini.png","order":6,"category":["设计模式"],"description":"意图 享元模式是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。 问题 假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/brain-boom/design-patterns/structural/flyweight.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"意图 享元模式是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。 问题 假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-10T08:16:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-10T08:16:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-10T08:16:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"外在状态存储","slug":"外在状态存储","link":"#外在状态存储","children":[]},{"level":3,"title":"享元与不可变性","slug":"享元与不可变性","link":"#享元与不可变性","children":[]},{"level":3,"title":"享元工厂","slug":"享元工厂","link":"#享元工厂","children":[]}]},{"level":2,"title":"享元模式结构","slug":"享元模式结构","link":"#享元模式结构","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"享元模式优缺点","slug":"享元模式优缺点","link":"#享元模式优缺点","children":[]},{"level":2,"title":"与其他模式的关系","slug":"与其他模式的关系","link":"#与其他模式的关系","children":[]}],"git":{"createdTime":1741180358000,"updatedTime":1744272961000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":1,"url":"https://github.com/damiaoxi"},{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":3,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":9.6,"words":2880},"localizedDate":"2025年3月5日","excerpt":"<h2>意图</h2>\\n<p>享元模式是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p>\\n<figure><figcaption></figcaption></figure>\\n<h2>问题</h2>\\n<p>假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图上穿行， 为玩家提供紧张刺激的游戏体验。</p>\\n<p>开发完成后， 你推送提交了最新版本的程序， 并在编译游戏后将其发送给了一个朋友进行测试。 尽管该游戏在你的电脑上完美运行， 但是你的朋友却无法长时间进行游戏： 游戏总是会在他的电脑上运行几分钟后崩溃。 在研究了几个小时的调试消息记录后， 你发现导致游戏崩溃的原因是内存容量不足。 朋友的设备性能远比不上你的电脑， 因此游戏运行在他的电脑上时很快就会出现问题。</p>","autoDesc":true}')}}]);