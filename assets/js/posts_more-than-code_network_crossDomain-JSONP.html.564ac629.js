"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[1062],{66262:(t,e)=>{e.A=(t,e)=>{const i=t.__vccOpts||t;for(const[t,o]of e)i[t]=o;return i}},67170:(t,e,i)=>{i.r(e),i.d(e,{comp:()=>n,data:()=>p});var o=i(20641);const r=i.p+"assets/img/image-20240226211907395.c46a063f.png",a={},n=(0,i(66262).A)(a,[["render",function(t,e){return(0,o.uX)(),(0,o.CE)("div",null,e[0]||(e[0]=[(0,o.Lk)("p",null,"在 CORS 出现之前，人们想了一种奇妙的办法来实现跨域，这就是 JSONP。",-1),(0,o.Lk)("p",null,"要实现 JSONP，需要浏览器和服务器来一个天衣无缝的绝妙配合。",-1),(0,o.Lk)("p",null,"JSONP 的做法是当需要跨域请求时，不使用AJAX,转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端。",-1),(0,o.Lk)("figure",null,[(0,o.Lk)("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),(0,o.Lk)("figcaption")],-1),(0,o.Lk)("p",null,"JSONP 有着明显的缺点，即其只能支持 GET 请求。",-1)]))}]]),p=JSON.parse('{"path":"/posts/more-than-code/network/crossDomain-JSONP.html","title":"跨域-JSONP","lang":"zh-CN","frontmatter":{"title":"跨域-JSONP","icon":"tabler:json","order":10,"category":["网络"],"description":"在 CORS 出现之前，人们想了一种奇妙的办法来实现跨域，这就是 JSONP。 要实现 JSONP，需要浏览器和服务器来一个天衣无缝的绝妙配合。 JSONP 的做法是当需要跨域请求时，不使用AJAX,转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/more-than-code/network/crossDomain-JSONP.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"跨域-JSONP"}],["meta",{"property":"og:description","content":"在 CORS 出现之前，人们想了一种奇妙的办法来实现跨域，这就是 JSONP。 要实现 JSONP，需要浏览器和服务器来一个天衣无缝的绝妙配合。 JSONP 的做法是当需要跨域请求时，不使用AJAX,转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-10T08:16:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-10T08:16:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域-JSONP\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-10T08:16:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1739717238000,"updatedTime":1744272961000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":3,"url":"https://github.com/damiaoxi"},{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":0.73,"words":220},"localizedDate":"2025年2月16日","excerpt":"<p>在 CORS 出现之前，人们想了一种奇妙的办法来实现跨域，这就是 JSONP。</p>\\n<p>要实现 JSONP，需要浏览器和服务器来一个天衣无缝的绝妙配合。</p>\\n<p>JSONP 的做法是当需要跨域请求时，不使用AJAX,转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端。</p>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}')}}]);