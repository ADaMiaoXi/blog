"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[5478],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},85416:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(20641);const e={},t=(0,a(66262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="maven的简介" tabindex="-1"><a class="header-anchor" href="#maven的简介"><span>Maven的简介</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>Maven主要服务于基于java平台的项目构建，依赖管理和项目信息管理。</p><h3 id="项目构建工具" tabindex="-1"><a class="header-anchor" href="#项目构建工具"><span>项目构建工具</span></a></h3><ul><li><p><strong>Ant构建</strong></p><p>最早的构建工具，基于IDE,大概是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好</p></li><li><p>**Maven **</p><p>项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具。它填补了Ant缺点，Maven第一次支持了从网络上下载的功能，仍然采用xmI作为配置文件格式。Maven专注的是依赖管理，使用 Java 编写。</p></li><li><p><strong>Gradle</strong></p><p>属于结合以上两个的优点，它继承了Ant的灵活和Maven的生命周期管理，它最后被 google 作为了 Android御用管理工具。它最大的区别是不用XML作为配置文件格式,采用了 DSL 格式，使得脚本更加简洁。</p></li></ul><p>目前市面上 Ant 比较老,所以一般是一些比较传统的软件 企业公司使用，Maven使用ava编写,是当下大多数互联网公司会使用的一个构建工具,中文文档也比较齐全， gradle是用 groovy 编写，目前比较新型的构建工具一些初创互联网公司会使用,以后会有很大的使用空间.</p><h2 id="maven-的四大特性" tabindex="-1"><a class="header-anchor" href="#maven-的四大特性"><span>Maven 的四大特性</span></a></h2><h3 id="依赖管理系统" tabindex="-1"><a class="header-anchor" href="#依赖管理系统"><span>依赖管理系统</span></a></h3><p>Maven 为 Java 世界引入了一个新的依赖管理系统 jar 包管理 jar 升级时修改配置文件即可。在Java世界中，可以用 <code>groupld</code>、<code>artifactld</code>、 <code>version</code>组成的 Coordination (坐标)唯一标识一个依赖。</p><p>任何基于Maven构建的项目自身也必须定义这三项属性，生成的包可以是 Jar 包，也可以是 war 包或者 jar 包。</p><p>一个典型的依赖引用如下所示：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; javax.servlet&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;javax.servlet-api &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.1.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>坐标属性的理解</strong></p><p>Maven 坐标为各种组件引入了秩序，任何一个组件都必须明确定义自己的坐标。</p><ul><li><p><strong>groupld</strong></p><p>定义当前 Maven 项目隶属的实际项目公司名称。( jar 包所在仓库路径) 由于 Maven 中模块的概念， 因此一个实际项目往往会被划分为很多模块。比如 spring 是一个实际项目， 其对应的 Maven 模块会有很多，如 spring-core，spring-webmvc 等。</p></li><li><p><strong>artifactld</strong></p><p>该元素定义实际项目中的一个 Maven 模块项目名，推荐的做法是使用实际项目名称作为 artifactld 的前缀。比如: spring-bean, spring-webmvc 等。</p></li><li><p><strong>version</strong></p><p>该元素定义Maven项目当前所处的版本。</p></li></ul><h3 id="多模块构建" tabindex="-1"><a class="header-anchor" href="#多模块构建"><span>多模块构建</span></a></h3><p>项目复查时 dao/service/controller 层分离将一个项目分解为多 个模块已经是很通用的一种方式。</p><p>在 Maven 中需要定义一个 parent POM 作为一组 module 的聚合POM。在该 POM 中可以使用 <code>&lt;modules&gt;</code> 标签来定义一组子模块。parent POM 不会有什么实际构建产出。而 parent POM 中的 build 配置以及依赖配置都会自动继承给子 module。</p><h2 id="一致的项目结构" tabindex="-1"><a class="header-anchor" href="#一致的项目结构"><span>一致的项目结构</span></a></h2><p>Ant 时代大家创建 Java 项目目录时比较随意,然后通过 Ant 配置指定哪些属于 source,那些属于 testSource 等。而 Maven 在设计之初的理念就是 Conversion over configuration (约定大于配置)。其制定了一套项目目录结构作为标准的 Java 项目结构,解决不同 ide 带来的文件目录不一致问题。</p><h3 id="一致的构建模型和插件机制" tabindex="-1"><a class="header-anchor" href="#一致的构建模型和插件机制"><span>一致的构建模型和插件机制</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p1ugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.mortbay.jetty&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;maven-jetty-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;6.1.25&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scanIntervalSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;10&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scanIntervalSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">contextPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;/test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">contextPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p1ugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',22)]))}]]),l=JSON.parse('{"path":"/posts/server/maven/introduction.html","title":"关于 Maven","lang":"zh-CN","frontmatter":{"title":"关于 Maven","icon":"catppuccin:maven","order":1,"category":["Maven"],"description":"Maven的简介 简介 Maven主要服务于基于java平台的项目构建，依赖管理和项目信息管理。 项目构建工具 Ant构建 最早的构建工具，基于IDE,大概是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好 **Maven ** 项目对象模型，通过其描述信息来管理项目的构建，报...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/server/maven/introduction.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"关于 Maven"}],["meta",{"property":"og:description","content":"Maven的简介 简介 Maven主要服务于基于java平台的项目构建，依赖管理和项目信息管理。 项目构建工具 Ant构建 最早的构建工具，基于IDE,大概是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好 **Maven ** 项目对象模型，通过其描述信息来管理项目的构建，报..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-05T09:31:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-05T09:31:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于 Maven\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-05T09:31:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Maven的简介","slug":"maven的简介","link":"#maven的简介","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"项目构建工具","slug":"项目构建工具","link":"#项目构建工具","children":[]}]},{"level":2,"title":"Maven 的四大特性","slug":"maven-的四大特性","link":"#maven-的四大特性","children":[{"level":3,"title":"依赖管理系统","slug":"依赖管理系统","link":"#依赖管理系统","children":[]},{"level":3,"title":"多模块构建","slug":"多模块构建","link":"#多模块构建","children":[]}]},{"level":2,"title":"一致的项目结构","slug":"一致的项目结构","link":"#一致的项目结构","children":[{"level":3,"title":"一致的构建模型和插件机制","slug":"一致的构建模型和插件机制","link":"#一致的构建模型和插件机制","children":[]}]}],"git":{"createdTime":1747304146000,"updatedTime":1749115891000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":2,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":3.18,"words":954},"localizedDate":"2025年5月15日","excerpt":"<h2>Maven的简介</h2>\\n<h3>简介</h3>\\n<p>Maven主要服务于基于java平台的项目构建，依赖管理和项目信息管理。</p>\\n<h3>项目构建工具</h3>\\n<ul>\\n<li>\\n<p><strong>Ant构建</strong></p>\\n<p>最早的构建工具，基于IDE,大概是2000年有的，当时是最流行java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好</p>\\n</li>\\n<li>\\n<p>**Maven **</p>\\n<p>项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具。它填补了Ant缺点，Maven第一次支持了从网络上下载的功能，仍然采用xmI作为配置文件格式。Maven专注的是依赖管理，使用 Java 编写。</p>\\n</li>\\n<li>\\n<p><strong>Gradle</strong></p>\\n<p>属于结合以上两个的优点，它继承了Ant的灵活和Maven的生命周期管理，它最后被 google 作为了 Android御用管理工具。它最大的区别是不用XML作为配置文件格式,采用了 DSL 格式，使得脚本更加简洁。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);