"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[6648],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},62737:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>O,data:()=>T});var e=a(20641);const t=a.p+"assets/img/centos-in-docker.39df4839.png",l=a.p+"assets/img/image-levels.e18b34fa.png",n=a.p+"assets/img/ubuntu-vim.820d14db.png",o=a.p+"assets/img/update-apt.d0c8444b.png",r=a.p+"assets/img/apt-install-vim.66ba0611.png",c=a.p+"assets/img/commit-ubentu1.5c76fb5a.png",h=a.p+"assets/img/commit-ubentu2.163ddd0a.png",d=a.p+"assets/img/compare-image.b26cb163.png",g=a.p+"assets/img/commit-image-to-aliyun.36dee4f4.png",p=a.p+"assets/img/commit-centos.628e4a54.png",m=a.p+"assets/img/commit-image-to-aliyun1.e1416316.png",k=a.p+"assets/img/commit-image-to-aliyun2.93f0a33e.png",u=a.p+"assets/img/commit-image-to-aliyun3.004d6769.png",b=a.p+"assets/img/commit-image-to-aliyun4.6efcd66a.png",y=a.p+"assets/img/commit-image-to-aliyun5.8ec219cb.png",f=a.p+"assets/img/commit-image-to-aliyun6.93ffbcdd.png",v=a.p+"assets/img/commit-image-to-aliyun7.97075622.png",F=a.p+"assets/img/commit-image-to-aliyun8.a8bf605e.png",A=a.p+"assets/img/commit-image-to-aliyun9.a97d001c.png",z=a.p+"assets/img/commit-image-to-aliyun10.a5e08c48.png",x=a.p+"assets/img/commit-image-to-aliyun11.471d0ef6.png",C=a.p+"assets/img/commit-image-to-aliyun12.2d36807b.png",D=a.p+"assets/img/commit-image-to-aliyun13.e5098c72.png",E=a.p+"assets/img/commit-image-to-aliyun14.adb2e3a9.png",S={},O=(0,a(66262).A)(S,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。</p><h2 id="docker-镜像加载原理" tabindex="-1"><a class="header-anchor" href="#docker-镜像加载原理"><span>Docker 镜像加载原理</span></a></h2><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。<br> bootfs(boot file system)主要包含 bootloader 和 kernel, bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是引导文件系统 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><p>rootfs (root file system) ，在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。</p><blockquote><p>平时安装进虚拟机的 CentOS 都是好几个 G，为什么 docker 这里才 200M？？<br><img src="'+t+'" alt="" loading="lazy"><br> 对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版, bootfs 基本是一致的, rootfs 会有差别, 因此不同的发行版可以公用 bootfs。</p></blockquote><h2 id="docker-镜像层都是只读的-容器层是可写的" tabindex="-1"><a class="header-anchor" href="#docker-镜像层都是只读的-容器层是可写的"><span>Docker 镜像层都是只读的，容器层是可写的</span></a></h2><p>当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。<br> 所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><blockquote><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><h2 id="docker-镜像-commit-操作案例" tabindex="-1"><a class="header-anchor" href="#docker-镜像-commit-操作案例"><span>Docker 镜像 <code>commit</code> 操作案例</span></a></h2><p><code>docker commit</code>：提交容器副本使之成为一个新的镜像</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;提交的描述信息&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;作者&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 容器ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 要创建的目标镜像名:[标签名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>案例演示 ubuntu 安装 vim</strong></p><ul><li>从 Hub 上下载 ubuntu 镜像到本地并成功运行</li><li>原始的默认 Ubuntu 镜像是不带着 <code>vim</code> 命令的<br><img src="'+n+'" alt="" loading="lazy"></li><li>外网连通的情况下，安装 vim<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新包管理工具</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 vim</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="'+o+'" alt="" loading="lazy"><br><img src="'+r+'" alt="" loading="lazy"></li><li>安装完成后，<code>commit</code> 自己的新镜像<br><img src="'+c+'" alt="" loading="lazy"><br><img src="'+h+'" alt="" loading="lazy"></li><li>启动新镜像并和原来的对比<br><img src="'+d+'" alt="" loading="lazy"><ul><li>官网是默认下载的 Ubuntu 没有 <code>vim</code> 命令</li><li>自己 <code>commit</code> 构建的镜像，新增加了 <code>vim</code> 功能，可以成功使用。</li></ul></li></ul><h2 id="本地镜像发布到阿里云" tabindex="-1"><a class="header-anchor" href="#本地镜像发布到阿里云"><span>本地镜像发布到阿里云</span></a></h2><h3 id="本地镜像发布到阿里云流程" tabindex="-1"><a class="header-anchor" href="#本地镜像发布到阿里云流程"><span>本地镜像发布到阿里云流程</span></a></h3><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="生成镜像" tabindex="-1"><a class="header-anchor" href="#生成镜像"><span>生成镜像</span></a></h3><p>基于当前容器创建一个新的镜像，新功能增强</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [OPTIONS] 容器ID [REPOSITORY[:TAG]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>OPTIONS 说明：<br><code>-a</code> :提交的镜像作者；<br><code>-m</code> :提交时的说明文字；</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="将本地镜像推送到阿里云" tabindex="-1"><a class="header-anchor" href="#将本地镜像推送到阿里云"><span>将本地镜像推送到阿里云</span></a></h3><ul><li><p>本地镜像素材原型<br><img src="'+m+'" alt="" loading="lazy"></p></li><li><p>阿里云开发者平台<br><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html" target="_blank" rel="noopener noreferrer">https://promotion.aliyun.com/ntms/act/kubernetes.html</a><br><img src="'+k+'" alt="" loading="lazy"></p><ul><li>创建仓库镜像<br><img src="'+u+'" alt="" loading="lazy"></li><li>选择控制台，进入容器镜像服务<br><img src="'+b+'" alt="" loading="lazy"></li><li>选择个人实例<br><img src="'+y+'" alt="" loading="lazy"></li><li>命名空间<br><img src="'+f+'" alt="" loading="lazy"><br><img src="'+v+'" alt="" loading="lazy"><br><img src="'+F+'" alt="" loading="lazy"><br><img src="'+A+'" alt="" loading="lazy"><br><img src="'+z+'" alt="" loading="lazy"></li><li>进入管理界面获得脚本<br><img src="'+x+'" alt="" loading="lazy"></li></ul></li><li><p>将镜像推送到阿里云</p><ul><li>管理界面脚本<br><img src="'+C+'" alt="" loading="lazy"></li><li>脚本实例</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> login</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --username=zzyybuy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry.cn-hangzhou.aliyuncs.com</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cea1bb40441c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h2 id="将阿里云上的镜像下载到本地" tabindex="-1"><a class="header-anchor" href="#将阿里云上的镜像下载到本地"><span>将阿里云上的镜像下载到本地</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',26)]))}]]),T=JSON.parse('{"path":"/posts/server/docker/image.html","title":"Docker 镜像","lang":"zh-CN","frontmatter":{"title":"Docker 镜像","icon":"clarity:command-line","order":6,"category":["Docker"],"description":"镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。 Docker 镜像加载原理 docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。 boot...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/server/docker/image.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"Docker 镜像"}],["meta",{"property":"og:description","content":"镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。 Docker 镜像加载原理 docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。 boot..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T08:31:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T08:31:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 镜像\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-23T08:31:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker 镜像加载原理","slug":"docker-镜像加载原理","link":"#docker-镜像加载原理","children":[]},{"level":2,"title":"Docker 镜像层都是只读的，容器层是可写的","slug":"docker-镜像层都是只读的-容器层是可写的","link":"#docker-镜像层都是只读的-容器层是可写的","children":[]},{"level":2,"title":"Docker 镜像 commit 操作案例","slug":"docker-镜像-commit-操作案例","link":"#docker-镜像-commit-操作案例","children":[]},{"level":2,"title":"本地镜像发布到阿里云","slug":"本地镜像发布到阿里云","link":"#本地镜像发布到阿里云","children":[{"level":3,"title":"本地镜像发布到阿里云流程","slug":"本地镜像发布到阿里云流程","link":"#本地镜像发布到阿里云流程","children":[]},{"level":3,"title":"生成镜像","slug":"生成镜像","link":"#生成镜像","children":[]},{"level":3,"title":"将本地镜像推送到阿里云","slug":"将本地镜像推送到阿里云","link":"#将本地镜像推送到阿里云","children":[]}]},{"level":2,"title":"将阿里云上的镜像下载到本地","slug":"将阿里云上的镜像下载到本地","link":"#将阿里云上的镜像下载到本地","children":[]}],"git":{"createdTime":1747989069000,"updatedTime":1747989069000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":3.37,"words":1011},"localizedDate":"2025年5月23日","excerpt":"<p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。</p>\\n<h2>Docker 镜像加载原理</h2>\\n<p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。<br>\\nbootfs(boot file system)主要包含 bootloader 和 kernel, bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是引导文件系统 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p>","autoDesc":true}')}}]);