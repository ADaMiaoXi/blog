"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[9427],{66262:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,i]of e)a[t]=i;return a}},71764:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>p,data:()=>s});var i=a(20641);const n=a.p+"assets/img/adapter-zh.7faf8c04.png",r=a.p+"assets/img/problem-zh.b6fc01a7.png",o={},p=(0,a(66262).A)(o,[["render",function(t,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h2 id="意图" tabindex="-1"><a class="header-anchor" href="#意图"><span>意图</span></a></h2><p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p><p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p><figure><img src="'+r+'" alt="你无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。" tabindex="0" loading="lazy"><figcaption>你无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。</figcaption></figure>',7)]))}]]),s=JSON.parse('{"path":"/posts/brain-boom/design-patterns/structural/adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","icon":"/assets/images/brain-boom/design-patterns/structural/adapter/adapter-mini.png","order":1,"category":["设计模式"],"description":"意图 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。 问题 假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。 在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。 你无法 “直接” 使用分...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/brain-boom/design-patterns/structural/adapter.html"}],["meta",{"property":"og:site_name","content":"大喵喜的技术杂货铺"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"意图 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。 问题 假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。 在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。 你无法 “直接” 使用分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-10T08:16:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-10T08:16:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-10T08:16:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"意图","slug":"意图","link":"#意图","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]}],"git":{"createdTime":1744272961000,"updatedTime":1744272961000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":0.65,"words":194},"localizedDate":"2025年4月10日","excerpt":"<h2>意图</h2>\\n<p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p>\\n<figure><figcaption></figcaption></figure>\\n<h2>问题</h2>\\n<p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p>\\n<p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p>\\n<figure><figcaption>你无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。</figcaption></figure>","autoDesc":true}')}}]);