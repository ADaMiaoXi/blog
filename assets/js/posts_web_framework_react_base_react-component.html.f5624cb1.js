"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[7381],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},23202:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var e=a(20641);const n={},t=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<p>React 定义组件可以分为两种定义方式：</p><ul><li><strong>类式</strong>定义组件：官方最初推荐的组件定义方式，能够定义出最全功能的组件</li><li><strong>函数式</strong>定义组件：后增的组件定义方式，单靠函数定义只能定义出简单功能的组件，其余类式组件的功能缺失需要依赖 <strong>Hook</strong> 补充。</li></ul><h2 id="函数式组件" tabindex="-1"><a class="header-anchor" href="#函数式组件"><span>函数式组件</span></a></h2><h3 id="定义方式" tabindex="-1"><a class="header-anchor" href="#定义方式"><span>定义方式</span></a></h3><ul><li><p>定义一个返回值为虚拟 DOM 的函数</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;这是一个函数式组件（适用于简单组件的定义）&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：组件定义函数的函数名即组件名，组件名需要大写React才会将其当作组件处理。</p></li><li><p>渲染组件到页面</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;,</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>**补充：**执行了 <code>ReactDOM.render(&lt;Demo/&gt;,...)</code> 后发生了什么？</p><ul><li>React 解析组件标签，寻找 Demo 组件的定义位置。</li><li>React 发现 Demo 组件是用函数定义的，随后 React 去直接调用函数，将返回的虚拟 DOM 渲染到页面。</li></ul></li></ul><h3 id="函数式组件的缺陷" tabindex="-1"><a class="header-anchor" href="#函数式组件的缺陷"><span>函数式组件的缺陷</span></a></h3><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1.定义一个组件（函数式）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// undefined</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;这是一个函数式组件（适用于简单组件的定义）&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2.渲染组件到页面</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;,</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于babel解析代码是在严格模式下，函数式组件中 <code>this</code> 指向是丢失的，所以无法实现很多功能。</p><h2 id="类式组件" tabindex="-1"><a class="header-anchor" href="#类式组件"><span>类式组件</span></a></h2><h3 id="定义方式-1" tabindex="-1"><a class="header-anchor" href="#定义方式-1"><span>定义方式</span></a></h3><ul><li><p>定义一个类，必须继承 <code>React.Component</code></p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>类中<strong>必须</strong>定义一个 <code>render()</code>方法，该方法必须返回一个虚拟DOM，React 会将这个虚拟DOM渲染到挂载容器中。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#50A14F;--shiki-dark:#E5C07B;"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Demo 的实例对象 &lt;==&gt; Demo组件的实例对象 &lt;==&gt; Demo组件对象</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;这是一个类定义的组件（适用于复杂组件的定义）&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>渲染组件到页面</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Demo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>**补充：**执行了 <code>ReactDOM.render(&lt;Demo/&gt;...)</code>后发生了什么？</p><ul><li><p>React 解析组件标签，寻找 Demo 组件的定义位置。</p></li><li><p>React 发现Demo组件是用类定义的，React创建了一个Demo的实例对象 <code>d</code>。</p></li><li><p>React 通过 <code>d</code> 去调用了 <code>render()</code> 方法</p></li></ul></li></ul>',11)]))}]]),l=JSON.parse('{"path":"/posts/web/framework/react/base/react-component.html","title":"React 组件","lang":"zh-CN","frontmatter":{"title":"React 组件","icon":"ri:reactjs-line","order":2,"category":["React"],"description":"React 定义组件可以分为两种定义方式： 类式定义组件：官方最初推荐的组件定义方式，能够定义出最全功能的组件 函数式定义组件：后增的组件定义方式，单靠函数定义只能定义出简单功能的组件，其余类式组件的功能缺失需要依赖 Hook 补充。 函数式组件 定义方式 定义一个返回值为虚拟 DOM 的函数 注意：组件定义函数的函数名即组件名，组件名需要大写Reac...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/web/framework/react/base/react-component.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"React 组件"}],["meta",{"property":"og:description","content":"React 定义组件可以分为两种定义方式： 类式定义组件：官方最初推荐的组件定义方式，能够定义出最全功能的组件 函数式定义组件：后增的组件定义方式，单靠函数定义只能定义出简单功能的组件，其余类式组件的功能缺失需要依赖 Hook 补充。 函数式组件 定义方式 定义一个返回值为虚拟 DOM 的函数 注意：组件定义函数的函数名即组件名，组件名需要大写Reac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-07T08:23:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-07T08:23:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React 组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-07T08:23:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"函数式组件","slug":"函数式组件","link":"#函数式组件","children":[{"level":3,"title":"定义方式","slug":"定义方式","link":"#定义方式","children":[]},{"level":3,"title":"函数式组件的缺陷","slug":"函数式组件的缺陷","link":"#函数式组件的缺陷","children":[]}]},{"level":2,"title":"类式组件","slug":"类式组件","link":"#类式组件","children":[{"level":3,"title":"定义方式","slug":"定义方式-1","link":"#定义方式-1","children":[]}]}],"git":{"createdTime":1745075288000,"updatedTime":1746606220000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":1,"url":"https://github.com/damiaoxi"},{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":1.87,"words":561},"localizedDate":"2025年4月19日","excerpt":"<p>React 定义组件可以分为两种定义方式：</p>\\n<ul>\\n<li><strong>类式</strong>定义组件：官方最初推荐的组件定义方式，能够定义出最全功能的组件</li>\\n<li><strong>函数式</strong>定义组件：后增的组件定义方式，单靠函数定义只能定义出简单功能的组件，其余类式组件的功能缺失需要依赖 <strong>Hook</strong> 补充。</li>\\n</ul>\\n<h2>函数式组件</h2>\\n<h3>定义方式</h3>\\n<ul>\\n<li>\\n<p>定义一个返回值为虚拟 DOM 的函数</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsx\\" data-title=\\"jsx\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Demo</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(){</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">h1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;这是一个函数式组件（适用于简单组件的定义）&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">h1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>注意</strong>：组件定义函数的函数名即组件名，组件名需要大写React才会将其当作组件处理。</p>\\n</li>\\n<li>\\n<p>渲染组件到页面</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"jsx\\" data-title=\\"jsx\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">ReactDOM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">render</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(&lt;</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Demo</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">/&gt;,</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">document</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">querySelector</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\'#app\'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">))</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>**补充：**执行了  <code>ReactDOM.render(&lt;Demo/&gt;,...)</code> 后发生了什么？</p>\\n<ul>\\n<li>React 解析组件标签，寻找 Demo 组件的定义位置。</li>\\n<li>React 发现 Demo 组件是用函数定义的，随后 React 去直接调用函数，将返回的虚拟 DOM 渲染到页面。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);