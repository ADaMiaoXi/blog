"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[6560],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},80650:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>t});var e=a(20641);const l={},n=(0,a(66262).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<p>Yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出的一个新的 JavaScript 包管理工具，<strong>它仍然使用 NPM 的 registry</strong>，但提供了全新的 CLI 来对包进行管理。</p><p>过去，由于 早期 NPM 存在以下问题，Yarn 的出现极大地抢占了 NPM 的市场份额。</p><ul><li>依赖目录嵌套层次深：早期 NPM 的依赖是嵌套的，这在 Windows 系统上是一个严重问题，由于众所周知的原因，Windows 系统无法支持过深的目录结构。</li><li>下载速度慢： <ul><li>由于嵌套层次的问题，NPM 对包的下载只能是串行的，即前一个包下载完后才会下载下一个包，导致带宽资源没有被充分利用。</li><li>多个相同版本的包会被重复下载。</li></ul></li><li>控制台输出繁杂：早期 NPM 安装包时，每安装一个依赖，就会输出依赖的详细信息，导致一次安装有大量信息输出到控制台，遇到错误时极难排查。</li><li>执行指令困难： 早期 NPM 没有执行依赖包指令的工具，执行指令需要手动执行 <code>bin</code> 目录下的文件，需要写出完整路径。（没有 <code>npx</code>）</li><li>工程移植问题：由于 NPM 的版本依赖可以是模糊的，可能导致工程移植后依赖的确切版本不一致。(没有 package.json 文件)</li></ul><p>yarn 采用了以下手段解决了上述问题：</p><ul><li>使用扁平的目录结构</li><li>并行下载</li><li>使用本地缓存</li><li>控制台仅输出关键信息</li><li>使用 yarn.lock 文件记录确切依赖</li></ul><p>yarn 还优化了以下内容：</p><ul><li>增加了某些功能强大的命令</li><li>让既有的命令更加语义化</li><li>本地安装的 CLI 工具可以使用 <code>yarn</code> 直接启动</li><li>将全局安装的目录当作一个普通的工程，生成 package.json 文件，便于全局安装移植</li></ul><p>Yarn 的出现给 NPM 带来了巨大的压力。很快，NPM 借鉴了 Yarn 的先进理念，不断对自身进行优化。到了 <code>npm@6</code> 版本，几乎完全解决了上述问题：</p><ul><li>目录扁平化</li><li>并行下载</li><li>本地缓存</li><li>使用 package-lock.json 记录确切依赖</li><li>增加了大量的命令别名</li><li>内置了 <code>npx</code>，可以启动本地的 CLI 工具</li><li>极大简化了控制台输出</li></ul><p><code>npm@6</code> 之后，可以说 NPM 已经和 Yarn 非常接近，甚至没有差距。许多新项目又重新从 Yarn 转回到 NPM。</p><h2 id="yarn-指令" tabindex="-1"><a class="header-anchor" href="#yarn-指令"><span>yarn 指令</span></a></h2><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [--yes/-y]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包"><span>安装包</span></a></h3><h4 id="安装指定包" tabindex="-1"><a class="header-anchor" href="#安装指定包"><span>安装指定包：</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [global] add [--dev/-D]  [--exact/-E] &lt;package-name&gt;[@</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>global</code>：安装为全局包</li><li><code>--dev</code> / <code>-D</code>：安装为开发依赖</li><li><code>--exact</code> / <code>-E</code>：安装指定版本<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 不使用 -E 参数，默认可能安装 ^1.2.3 版本范围</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package-name@1.2.3</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 -E 参数，精确安装 1.2.3 版本</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package-name@1.2.3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -E</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>@&lt;version&gt;</code>： 指定版本</li></ul><h4 id="安装-package-json-中的依赖" tabindex="-1"><a class="header-anchor" href="#安装-package-json-中的依赖"><span>安装 package.json 中的依赖</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [--production/--prod]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--production/--prod</code>：只安装生产环境依赖，当使用 <code>--production</code> 或 <code>--prod</code> 参数时，yarn 只会安装 package.json 中 <code>dependencies</code> 字段列出的依赖，而不会安装 <code>devDependencies</code> 字段中的开发依赖</li></ul><h3 id="运行脚本-本地-cli" tabindex="-1"><a class="header-anchor" href="#运行脚本-本地-cli"><span>运行脚本/本地 CLI</span></a></h3><ul><li><p>运行脚本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">script-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; [-- &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>运行本地 CLI 工具：<br> yarn 运行 CLI （<code>.bin</code> 文件下命令）不用像 npm 一样使用 <code>npx</code>，直接使用 <code>yarn run</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><p>查看 bin 目录路径：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [global] bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>global</code>：查看全局 <code>bin</code> 目录的路径</li></ul><p>查询包信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [子字段]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>列举已安装的依赖：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [global] list [--depth</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">依赖深度]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>yarn 的 <code>list</code> 命令和 npm 的 <code>list</code> 不同，yarn 输出的信息更加丰富，包括顶级目录结构、每个包的依赖版本号</p><h3 id="更新包" tabindex="-1"><a class="header-anchor" href="#更新包"><span>更新包</span></a></h3><p>列举需要更新的包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> outdated</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更新包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [global] upgrade [包名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="卸载包" tabindex="-1"><a class="header-anchor" href="#卸载包"><span>卸载包</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="特有指令" tabindex="-1"><a class="header-anchor" href="#特有指令"><span>特有指令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>验证 package.json 文件的依赖记录和 lock 文件是否一致，用于防篡改。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> audit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>检查本地安装的包有哪些已知漏洞，以表格的形式列出<br> 漏洞级别如下：<br><code>INFO</code>：信息级别<br><code>LOW</code>: 低级别<br><code>MODERATE</code>：中级别<br><code>HIGH</code>：高级别<br><code>CRITICAL</code>：关键级别</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> why</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在控制台打印出安装这个包的原因，哪些包会用到它</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于大部分脚手架工具都是以 <code>create-xxx</code> 的方式命名的，比如 React 的官方脚手架名称为 <code>create-react-app</code></p><p>可以使用 <code>yarn create</code> 命令来一步完成安装和搭建</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-app</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-app</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等同于下面的两条命令</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create-react-app</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create-react-app</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',49)]))}]]),t=JSON.parse('{"path":"/posts/web/project-builds/package-manager/yarn.html","title":"yarn","lang":"zh-CN","frontmatter":{"title":"yarn","icon":"logos:yarn","order":2,"category":["Package manager"],"description":"Yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出的一个新的 JavaScript 包管理工具，它仍然使用 NPM 的 registry，但提供了全新的 CLI 来对包进行管理。 过去，由于 早期 NPM 存在以下问题，Yarn 的出现极大地抢占了 NPM 的市场份额。 依赖目录嵌套层次深：早期 NPM 的依赖是...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/web/project-builds/package-manager/yarn.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"yarn"}],["meta",{"property":"og:description","content":"Yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出的一个新的 JavaScript 包管理工具，它仍然使用 NPM 的 registry，但提供了全新的 CLI 来对包进行管理。 过去，由于 早期 NPM 存在以下问题，Yarn 的出现极大地抢占了 NPM 的市场份额。 依赖目录嵌套层次深：早期 NPM 的依赖是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T14:18:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T14:18:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"yarn\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T14:18:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"yarn 指令","slug":"yarn-指令","link":"#yarn-指令","children":[{"level":3,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":3,"title":"安装包","slug":"安装包","link":"#安装包","children":[]},{"level":3,"title":"运行脚本/本地 CLI","slug":"运行脚本-本地-cli","link":"#运行脚本-本地-cli","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"更新包","slug":"更新包","link":"#更新包","children":[]},{"level":3,"title":"卸载包","slug":"卸载包","link":"#卸载包","children":[]},{"level":3,"title":"特有指令","slug":"特有指令","link":"#特有指令","children":[]}]}],"git":{"createdTime":1753692177000,"updatedTime":1755353903000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":3,"url":"https://github.com/Jianshu"},{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":2,"url":"https://github.com/damiaoxi"}]},"readingTime":{"minutes":3.92,"words":1176},"localizedDate":"2025年7月28日","excerpt":"<p>Yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出的一个新的 JavaScript 包管理工具，<strong>它仍然使用 NPM 的 registry</strong>，但提供了全新的 CLI 来对包进行管理。</p>\\n<p>过去，由于 早期 NPM 存在以下问题，Yarn 的出现极大地抢占了 NPM 的市场份额。</p>\\n<ul>\\n<li>依赖目录嵌套层次深：早期 NPM 的依赖是嵌套的，这在 Windows 系统上是一个严重问题，由于众所周知的原因，Windows 系统无法支持过深的目录结构。</li>\\n<li>下载速度慢：\\n<ul>\\n<li>由于嵌套层次的问题，NPM 对包的下载只能是串行的，即前一个包下载完后才会下载下一个包，导致带宽资源没有被充分利用。</li>\\n<li>多个相同版本的包会被重复下载。</li>\\n</ul>\\n</li>\\n<li>控制台输出繁杂：早期 NPM 安装包时，每安装一个依赖，就会输出依赖的详细信息，导致一次安装有大量信息输出到控制台，遇到错误时极难排查。</li>\\n<li>执行指令困难： 早期 NPM 没有执行依赖包指令的工具，执行指令需要手动执行 <code>bin</code> 目录下的文件，需要写出完整路径。（没有 <code>npx</code>）</li>\\n<li>工程移植问题：由于 NPM 的版本依赖可以是模糊的，可能导致工程移植后依赖的确切版本不一致。(没有 package.json 文件)</li>\\n</ul>","autoDesc":true}')}}]);