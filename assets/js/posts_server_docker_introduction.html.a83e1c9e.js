"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[3893],{66262:(e,i)=>{i.A=(e,i)=>{const r=e.__vccOpts||e;for(const[e,n]of i)r[e]=n;return r}},81146:(e,i,r)=>{r.r(i),r.d(i,{comp:()=>p,data:()=>s});var n=r(20641);const o=r.p+"assets/img/introduction.d2a0ccd0.png",t=r.p+"assets/img/introduction2.97cc6535.png",a=r.p+"assets/img/introduction3.4d824da5.png",l=r.p+"assets/img/introduction4.33b68148.png",c={},p=(0,r(66262).A)(c,[["render",function(e,i){const r=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[i[10]||(i[10]=(0,n.Lk)("h2",{id:"docker-理念",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#docker-理念"},[(0,n.Lk)("span",null,"Docker 理念")])],-1)),i[11]||(i[11]=(0,n.Lk)("p",null,"Docker 是基于 Go 语言实现的云开源项目。",-1)),(0,n.Lk)("p",null,[i[1]||(i[1]=(0,n.eW)("Docker 的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到")),(0,n.bF)(r,{color:"red"},{default:(0,n.k6)((()=>i[0]||(i[0]=[(0,n.eW)("“一次镜像，处处运行”")]))),_:1}),i[2]||(i[2]=(0,n.eW)("。"))]),i[12]||(i[12]=(0,n.Fv)('<figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在 Docker 容器上面的实例，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p><p>Docker 解决了运行环境和配置问题的软件容器， 方便做持续集成并有助于整体发布的容器虚拟化技术。</p><h2 id="容器与虚拟机比较" tabindex="-1"><a class="header-anchor" href="#容器与虚拟机比较"><span>容器与虚拟机比较</span></a></h2><h3 id="传统虚拟机技术" tabindex="-1"><a class="header-anchor" href="#传统虚拟机技术"><span>传统虚拟机技术</span></a></h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p><p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（VirtualBox、VMware 等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装操作系统，再从操作系统中安装部署各种应用。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虚拟机的缺点：</p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ol><h3 id="容器虚拟化技术" tabindex="-1"><a class="header-anchor" href="#容器虚拟化技术"><span>容器虚拟化技术</span></a></h3><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：<br> Linux容器(Linux Containers，缩写为 LXC)<br> Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p>',12)),(0,n.bF)(r,{color:"red"},{default:(0,n.k6)((()=>i[3]||(i[3]=[(0,n.eW)("Linux 容器不是模拟一个完整的操作系统")]))),_:1}),i[13]||(i[13]=(0,n.eW)("而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。")),(0,n.bF)(r,{color:"blue"},{default:(0,n.k6)((()=>i[4]||(i[4]=[(0,n.eW)("容器与虚拟机不同，不需要捆绑一整套操作系统")]))),_:1}),i[14]||(i[14]=(0,n.Fv)('，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。<figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Docker 容器实在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统虚拟机则是在硬件层面实现虚拟化，Docker 优势体现为启动速度快、占用体积小。</p><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><ul><li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener noreferrer">Docker 官网 [点击跳转]</a></li><li><a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub官网 [点击跳转]</a></li></ul><h2 id="安装前提" tabindex="-1"><a class="header-anchor" href="#安装前提"><span>安装前提</span></a></h2><p>Docker 不是一个通用容器，它依赖于已存在并允许的 Linux 内核环境。</p>',11)),(0,n.Lk)("p",null,[i[6]||(i[6]=(0,n.eW)("Docker 实质上是在一九运行的 Linux 下制造一个隔离的文件环境，因此它的执行效率几乎等同于所部署的 Linux 主机。")),i[7]||(i[7]=(0,n.Lk)("br",null,null,-1)),i[8]||(i[8]=(0,n.eW)(" 因此，")),(0,n.bF)(r,{color:"#FF0000"},{default:(0,n.k6)((()=>i[5]||(i[5]=[(0,n.eW)("Docker 必须部署在 Linux 内核的系统上")]))),_:1}),i[9]||(i[9]=(0,n.eW)("。如果其它系统想部署 Docker 就必须安装一个虚拟 Linux 环境。"))]),i[15]||(i[15]=(0,n.Lk)("p",null,"在 Windows 上部署 Docker 需要先安装一个虚拟机，并在安装 Linux 系统的虚拟机中运行 Docker。",-1))])}]]),s=JSON.parse('{"path":"/posts/server/docker/introduction.html","title":"关于 Docker","lang":"zh-CN","frontmatter":{"title":"关于 Docker","icon":"la:docker","order":1,"category":["Docker"],"description":"Docker 理念 Docker 是基于 Go 语言实现的云开源项目。 Docker 的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到。 Linux 容器技术的出现就解决了...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/server/docker/introduction.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"关于 Docker"}],["meta",{"property":"og:description","content":"Docker 理念 Docker 是基于 Go 语言实现的云开源项目。 Docker 的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到。 Linux 容器技术的出现就解决了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T08:45:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T08:45:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于 Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-23T08:45:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker 理念","slug":"docker-理念","link":"#docker-理念","children":[]},{"level":2,"title":"容器与虚拟机比较","slug":"容器与虚拟机比较","link":"#容器与虚拟机比较","children":[{"level":3,"title":"传统虚拟机技术","slug":"传统虚拟机技术","link":"#传统虚拟机技术","children":[]},{"level":3,"title":"容器虚拟化技术","slug":"容器虚拟化技术","link":"#容器虚拟化技术","children":[]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"下载","slug":"下载","link":"#下载","children":[]}]},{"level":2,"title":"安装前提","slug":"安装前提","link":"#安装前提","children":[]}],"git":{"createdTime":1747321601000,"updatedTime":1747989908000,"contributors":[{"name":"damiaoxi","username":"damiaoxi","email":"miaoxi1110@gmail.com","commits":2,"url":"https://github.com/damiaoxi"},{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":3.48,"words":1043},"localizedDate":"2025年5月15日","excerpt":"<h2>Docker 理念</h2>\\n<p>Docker 是基于 Go 语言实现的云开源项目。</p>\\n<p>Docker 的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到。</p>\\n<figure><figcaption></figcaption></figure>\\n<p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在 Docker 容器上面的实例，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>","autoDesc":true}')}}]);