"use strict";(self.webpackChunkmiaoxi_blog=self.webpackChunkmiaoxi_blog||[]).push([[2240],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},53094:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>k});var n=a(20641);const e=a.p+"assets/img/image-20230813211018834.c158e890.png",t=a.p+"assets/img/image-20230813211055295.442b9c1b.png",l=a.p+"assets/img/image-20230813211151156.0a3f5183.png",h=a.p+"assets/img/image-20230813211241882.8ebbc541.png",p={},r=(0,a(66262).A)(p,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<p>当第一次运行 Maven 命令的时候，你需要 Internet 链接，因为它需要从网上下载一些文件。那么它从哪里下载呢？它是从 Maven 默认的远程库下载的。这个远程仓库有 Maven 的核心插件和可供下载的 jar 文件。</p><p>对于 Maven 来说，仓库只分为两类：<strong>本地仓库</strong>和<strong>远程仓库</strong>。</p><p>当 Maven 根据坐标寻找构件的时候，它首先会查看本地仓库,如果本地仓库存在，则直接使用；如果本地没有，Maven 就会去远程仓库查找，发现需要的构件之后，下载到本地仓库再使用。如果本地仓库和远程仓库都没有，Maven 就会报错。</p><p>远程仓库分为三种：中央仓库，私服，其他公共库。<br> 中央仓库是默认配置下，Maven 下载 jar 包的地方。</p><p>私服是另一种特殊的远程仓库,为了节省带宽和时间，应该在局域网内架设一一个私有的仓库服务器，用其代理所有外部的远程仓库。内部的项目还能部署到私服上供其他项目使用。</p><p>一般来说， 在 Maven 项目目录下，没有诸如 <code>lib/</code> 这样用来存放依赖文件的目录。当 Maven 在执行编译或测试时，如果需要使用依赖文件，它总是基于坐标使用本地仓库的依赖文件。<br> 默认情况下，每个用户在自己的用户目录下都有一个路径名为 <code>.m2/repository/</code> 的仓库目录。 有时候， 因为某些原因（比如 c 盘空间不足），需要修改本地仓库目录地址。<br> 对于仓库路径的修改,可以通过 maven 配置文件 conf 目录下 settings.xml 来指定仓库路径：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;D:\\DevTools\\maven_repository&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中央仓库" tabindex="-1"><a class="header-anchor" href="#中央仓库"><span>中央仓库</span></a></h2><p>由于原始的本地仓库是空的，maven 必须知道至少一个可用的远程仓库，才能执行 maven 命令的时候下载到<br> 需要的构件。中央仓库就是这样一个默认的远程仓库。</p><p>maven-model-builder-3.3.9.jar maven 自动的 jar 中包含了一个超级 POM。定义了默认中央仓库的位置。中央仓库包含了 2000 多个开源项目,接收每天 1 亿次以上的访问。</p><h2 id="私服" tabindex="-1"><a class="header-anchor" href="#私服"><span>私服</span></a></h2><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的 maven 用户使用。当 maven 需要 下载构件时，它去私服当中找，如果私服没有，则从外部远程仓库下载，并缓存在私服上，再为 maven 提供。<br> 此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用配置方式项目 pom.xml 配置</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repositories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">snapshots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enab1ed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">snapshots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;public&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Pub1ic Repositories&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ur1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;http://192.168.0.96:8081/content/groups/pub1ic/&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ur1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;getui-nexus&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ur1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;http://mvn.gt.igexin.com/nexus/content/repositories/releases/&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ur1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">repositories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他公共库" tabindex="-1"><a class="header-anchor" href="#其他公共库"><span>其他公共库</span></a></h2><p>常用的阿里云仓库配置</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mirror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Repository-aliyun&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mirrorOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;central&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mirrorOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Aliyun repository&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;https://maven.aliyun.com/repository/public&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mirror</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何在中央仓库中寻找一个-jar-包" tabindex="-1"><a class="header-anchor" href="#如何在中央仓库中寻找一个-jar-包"><span>如何在中央仓库中寻找一个 jar 包</span></a></h2><p>以 servlet 为例：</p><p>访问 <a href="https://mvnrepository.com" target="_blank" rel="noopener noreferrer">https://mvnrepository.com</a>，在搜索框中搜索 servlet：</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择 Java Servlet API</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见 Servlet 的所有版本，选择其中一个版本：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可见其 pom.xml 的设置，复制粘贴到 <code>dependencies</code> 即可：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',26)]))}]]),k=JSON.parse('{"path":"/posts/server/maven/maven-repository.html","title":"Maven 仓库","lang":"zh-CN","frontmatter":{"title":"Maven 仓库","icon":"material-icon-theme:folder-repository","order":6,"category":["Maven"],"description":"当第一次运行 Maven 命令的时候，你需要 Internet 链接，因为它需要从网上下载一些文件。那么它从哪里下载呢？它是从 Maven 默认的远程库下载的。这个远程仓库有 Maven 的核心插件和可供下载的 jar 文件。 对于 Maven 来说，仓库只分为两类：本地仓库和远程仓库。 当 Maven 根据坐标寻找构件的时候，它首先会查看本地仓库,如...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/server/maven/maven-repository.html"}],["meta",{"property":"og:site_name","content":"大喵喜的杂货铺"}],["meta",{"property":"og:title","content":"Maven 仓库"}],["meta",{"property":"og:description","content":"当第一次运行 Maven 命令的时候，你需要 Internet 链接，因为它需要从网上下载一些文件。那么它从哪里下载呢？它是从 Maven 默认的远程库下载的。这个远程仓库有 Maven 的核心插件和可供下载的 jar 文件。 对于 Maven 来说，仓库只分为两类：本地仓库和远程仓库。 当 Maven 根据坐标寻找构件的时候，它首先会查看本地仓库,如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-15T10:15:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-15T10:15:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven 仓库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-15T10:15:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jianshu.Shi\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"中央仓库","slug":"中央仓库","link":"#中央仓库","children":[]},{"level":2,"title":"私服","slug":"私服","link":"#私服","children":[]},{"level":2,"title":"其他公共库","slug":"其他公共库","link":"#其他公共库","children":[]},{"level":2,"title":"如何在中央仓库中寻找一个 jar 包","slug":"如何在中央仓库中寻找一个-jar-包","link":"#如何在中央仓库中寻找一个-jar-包","children":[]}],"git":{"createdTime":1747304146000,"updatedTime":1747304146000,"contributors":[{"name":"Jianshu","username":"Jianshu","email":"jianshu.shi@eisgroup.com","commits":1,"url":"https://github.com/Jianshu"}]},"readingTime":{"minutes":2.95,"words":884},"localizedDate":"2025年5月15日","excerpt":"<p>当第一次运行 Maven 命令的时候，你需要 Internet 链接，因为它需要从网上下载一些文件。那么它从哪里下载呢？它是从 Maven 默认的远程库下载的。这个远程仓库有 Maven 的核心插件和可供下载的 jar 文件。</p>\\n<p>对于 Maven 来说，仓库只分为两类：<strong>本地仓库</strong>和<strong>远程仓库</strong>。</p>\\n<p>当 Maven 根据坐标寻找构件的时候，它首先会查看本地仓库,如果本地仓库存在，则直接使用；如果本地没有，Maven 就会去远程仓库查找，发现需要的构件之后，下载到本地仓库再使用。如果本地仓库和远程仓库都没有，Maven 就会报错。</p>","autoDesc":true}')}}]);